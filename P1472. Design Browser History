# stack 
# time visited O(n)
# space O(n)
class BrowserHistory:

    def __init__(self, homepage: str):
        self.stack = [homepage]
        self.cur_index = 0
        
    def visit(self, url: str) -> None:
        while len(self.stack) > self.cur_index + 1:
            self.stack.pop()
        self.stack.append(url)
        self.cur_index += 1
        
        
    def back(self, steps: int) -> str:
        self.cur_index = max(0, self.cur_index - steps)
        return self.stack[self.cur_index]

    def forward(self, steps: int) -> str:
        self.cur_index = min(self.cur_index + steps, len(self.stack) - 1)
        return self.stack[self.cur_index]


# stack
# time O(1), space O(1)

class BrowserHistory:

    def __init__(self, homepage: str):
        self.stack = ['' for _ in range(5001)]
        self.stack[0] = homepage
        self.cur_pos = 0
        self.end = 0

    def visit(self, url: str) -> None:
        self.cur_pos += 1
        self.stack[self.cur_pos] = url
        self.end = self.cur_pos
        

    def back(self, steps: int) -> str:
        self.cur_pos = max(0, self.cur_pos - steps)
        return self.stack[self.cur_pos]
        

    def forward(self, steps: int) -> str:
        self.cur_pos = min(self.end, self.cur_pos + steps)
        return self.stack[self.cur_pos]

