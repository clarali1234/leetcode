# time O(nlgn)
# space O(n)
# sweep line + heap

# heap里面保存的是当前遇到的所有建筑物 （-h, 有边界）
# sweep line保存所有的点, sort
# key logic: 遍历所有的点，add (-h, right) to heap 找到这个点下最高的高度 (如果该建筑物没有passed right board > current point) and current height is not add last time
# add to result

from heapq import * 
class Solution(object):
    def getSkyline(self, buildings):
        """
        :type buildings: List[List[int]]
        :rtype: List[List[int]]
        """
        heap = []
        res = [[0, -1]]
        
        points = []
        for b in buildings:
            points.append(b[0])
            points.append(b[1])

        points.sort()
        index = 0
        for p in points:
            while index < len(buildings) and p == buildings[index][0]:
                heappush(heap, (-buildings[index][2], buildings[index][1]))
                index += 1
                
            while heap and heap[0][1] <= p:
                heappop(heap)
            
            if heap:
                h = -heap[0][0]
            else:
                h = 0
                
            if h != res[-1][1]:
                res.append([p, h])
        return res[1:]
