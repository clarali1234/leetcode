# two pointers + hashset (sliding window)
# sliding windown keep the subtring with unique char

# time O(n)
# space min(m, n) m is size of alphabet, n is the len of input

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        
        i = 0
        j = 0
        hashset = set()
        
        res = 0
        for i in range(len(s)):
            while j < len(s) and s[j] not in hashset:
                hashset.add(s[j])
                j += 1
                
            res = max(res, j - i) # j - 1 - i + 1
            hashset.remove(s[i])
            
        return res
