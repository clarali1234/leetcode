class Solution(object):
    def lengthOfLongestSubstring(self, s):
        if not s:
            return 0
        
        l, r = 0, 0
        res = 0
        sub_set = set()
        while r < len(s):
            while r < len(s) and s[r] not in sub_set:
                sub_set.add(s[r])
                r += 1
                # candidate [l, r - 1]
            res = max(res, r - l)

            # contract left pointer 
            if r < len(s):
                while l < len(s) and s[l] != s[r]:
                    sub_set.remove(s[l])
                    l += 1

                l += 1
                sub_set.add(s[r])
                r += 1

        return res
            



# two pointers + hashset (sliding window)
# sliding windown keep the subtring with unique char

# time O(n)
# space min(m, n) m is size of alphabet, n is the len of input

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        
        i = 0
        j = 0
        hashset = set()
        
        res = 0
        for i in range(len(s)):
            while j < len(s) and s[j] not in hashset:
                hashset.add(s[j])
                j += 1
                
            res = max(res, j - i) # j - 1 - i + 1
            hashset.remove(s[i])
            
        return res
