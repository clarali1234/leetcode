# doc: key: index, val: node val
# array: []

class Node(object):
    def __init__(self, val = None, prev = None, nxt = None):
        self.val = val
        self.prev = prev
        self.next = nxt
        

class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dummy_head = ListNode(-1)
        self.dummy_tail = ListNode(-1)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        # 4 (index 0)
        cur_index = -1
        cur = self.dummy_head
        while cur_index < index:
            if cur.next: 
                node = cur.next 
                cur_index += 1
                cur = node
        #print(cur.val, cur.prev.val)
        if cur_index == index and cur.val != -1:
            return cur.val
        return -1
        

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        node = Node(val)
        prev_head = self.dummy_head.next
        self.dummy_head.next = node
        node.prev = self.dummy_head
        node.next = prev_head
        prev_head.prev = node

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        node = Node(val)
        prev_tail = self.dummy_tail.prev
        prev_tail.next = node
        node.prev = prev_tail
        node.next = self.dummy_tail
        self.dummy_tail.prev = node
        

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
    
        """
        # 1 2 3
        #   insert 4 at index1
        # 1 4 2 3
        # find node 2
        cur_index = -1
        cur = self.dummy_head
        while cur_index < index:
            if cur.next:
                cur = cur.next 
                cur_index += 1
        # cur_index == index 
        
        if cur_index == index:
            node = Node(val)
            prev_node = cur.prev
            prev_node.next = node
            node.prev = prev_node
            node.next = cur
            cur.prev = node
            

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        cur_index = -1
        cur = self.dummy_head
        while cur_index < index:
            if cur.next:
                cur = cur.next 
                cur_index += 1
        if cur_index == index:
            prev = cur.prev
            nxt = cur.next
            if nxt:
                prev.next = nxt
                nxt.prev = prev
