# brute force 
# time O(2^(m + n))
# space O(m + n)

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        self.res = sys.maxsize
        self.dfs(grid, 0, 0, grid[0][0])
        return self.res
    
    def dfs(self, grid, x, y, c_sum):
        
        if x == len(grid) - 1 and y == len(grid[0]) - 1:
            self.res = min(self.res, c_sum)
            return
        
        for dx, dy in [(1, 0), (0, 1)]:
            cur_x = x + dx
            cur_y = y + dy
            if 0 <= cur_x < len(grid) and 0 <= cur_y < len(grid[0]):
                self.dfs(grid, cur_x, cur_y, c_sum + grid[cur_x][cur_y])

# dfs + memo
# time O(m * n)
# space O(m * n)

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        self.dic = {}
        return self.dfs(grid, 0, 0)
        
    
    def dfs(self, grid, x, y):
        if (x, y) in self.dic:
            return self.dic[(x, y)]
        
        if x == len(grid) - 1 and y == len(grid[0]) - 1:
            self.dic[(x, y)] = grid[x][y]
            return grid[x][y]
        
        res = sys.maxsize
        for dx, dy in [(1, 0), (0, 1)]:
            cur_x = x + dx
            cur_y = y + dy
            if 0 <= cur_x < len(grid) and 0 <= cur_y < len(grid[0]):
                res = min(self.dfs(grid, cur_x, cur_y) + grid[x][y], res) 
        
        self.dic[(x, y)] = res
        return res
                


# dp
# dp[i][j] 到达i-1, j-1时最小sum
# 转移方程:f[i][j]=min{f[i-1][j],f[i][j-1]}+A[i][j]

  • 初始条件和边界情况:
  – f[0][0] = A[0][0]
  – i = 0 或 j = 0，则前一步只能有一个方向过来
  # time O(mn)
  # space O(mn)
  
 class Solution(object):
    def minPathSum(self, grid):
        
        m = len(grid)
        n = len(grid[0])
        
        dp = [[0 for _ in range(n)] for _ in range(m)]
        
        dp[0][0] = grid[0][0]
        
        for i in range(1, m):
            dp[i][0] = dp[i - 1][0] + grid[i][0]
        
        for j in range(1, n):
            dp[0][j] = dp[0][j - 1] + grid[0][j]
            
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]
                
        return dp[-1][-1]
        
 
 # dp space O(n)
 这里我们并不提前更新第一行或是第一列，而是在遍历的时候判断，若j等于0时，说明是第一列，
 我们直接加上当前的数字，否则就要比较是左边的 dp[j-1] 小还是上面的 dp[j] 小，
 当是第一行的时候，dp[j] 是整型最大值，所以肯定会取到 dp[j-1] 的值，然后再加上当前位置的数字即可，
 class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        M, N = len(grid), len(grid[0])
        cost = [sys.maxsize]*N

        for i in range(M):
            for j in range(N):
                if j == 0:
                    cost[j] = grid[i][j] + cost[j] if i > 0 else grid[i][j]
                else: 
                    cost[j] = min(cost[j-1], cost[j]) + grid[i][j]
        return cost[-1]
        
        
# dp space O(1)
发现path数组没有必要重新复制出来，可以直接使用grid代表了。
这样实际上就对grid进行了一个覆盖：遍历过的地方代表path，还没遍历到的地方代表grid。

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid:
            return 0
        
        m = len(grid)
        n = len(grid[0])
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    prev = 0
                elif i == 0:
                    prev = grid[i][j - 1]
                elif j == 0:
                    prev = grid[i - 1][j]
                else:
                    prev = min(grid[i - 1][j], grid[i][j - 1])
                grid[i][j] = grid[i][j] + prev
        return grid[i][j]
