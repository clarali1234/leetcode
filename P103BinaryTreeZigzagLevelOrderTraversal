

# BFS

# time O(n), space O(n)

from collections import deque

class Solution(object):
    def zigzagLevelOrder(self, root):
        if not root:
            return []
        
        res =[]
        depth = 0
        
        queue = collections.deque([root])
        while queue:
            level = []
            for _ in range(len(queue)):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            if depth % 2:
                res.append(level[::-1])
            else:
                res.append(level)
            depth += 1
        return res
                
        
 class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        
        res = []
        q = collections.deque([root])
        c = 1
        while q:
            level = collections.deque()
            for _ in range(len(q)):
                node = q.popleft()
                if c % 2:
                    level.append(node.val)
                else:
                    level.appendleft(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            c += 1
            res.append(level)
        return res
                        

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import deque

class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        
        results = []
        self.add_level(results, 0, root)
        return results
    
    def add_level(self, results, level, root):
        if not root:
            return 
        
        if len(results) <= level:
            results.append([root.val])
        elif not level % 2:
            results[level].extend([root.val])
        else:
            results[level].insert(0, root.val)
        
        self.add_level(results, level + 1, root.left)
        self.add_level(results, level + 1, root.right)
