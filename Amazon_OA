# prob1 

# num = 6
# skills = [12, 4, 6, 13, 5, 10]
# minAssociates = 3
# minLevel = 4
# maxLevel = 10


# numAsso >= 3
# [4, 6, 5, 10]

# num = 3
# num = 4 

class Solution(object):
    def combination(self, num, skills, minAsso, minL, maxL):
        new_skills = []
        for skill in skills:
            if skill >= minL and skill <= maxL:
                new_skills.append(skill)
        
        candidates = []
        if minAsso > len(new_skills):
            return 0
        candidates = [x for x in range(minAsso,(len(new_skills) + 1))]
        
        print(new_skills, candidates)
        self.res = 0
        for ele in candidates:  
            self.dfs(new_skills, 0, 0, ele)
        return self.res
    
# [4, 6, 5, 10]

# num = 3 / 4
# num = 4 
    def dfs(self, nums, cur_num, start_index, count):
        
        if cur_num == count:
            self.res += 1
            return 
        
        if not nums:
            return 
        
        for i in range(start_index, len(nums)):
            self.dfs(nums[:i] + nums[i + 1:], cur_num + 1, i, count)
            
        #self.dfs(nums, cur_num + 1, cur_index, count)
        #self.dfs(nums, cur_num, cur_index + 1, count)
        
            
test = Solution()
print(test.combination(6, [12, 4, 6, 13, 5, 10], 3, 4, 10))

# prob2 
import heapq

def maxUnits(num, boxes, unitSize, unitsPerBox, truckSize):
    heap = []

    for i in range(len(boxes)):
        units_per_box = unitsPerBox[i]
        heapq.heappush(heap, (-units_per_box, boxes[i]))

    res = 0

    while truckSize > 0 and heap:
        curr_max = heapq.heappop(heap)
        max_boxes = min(truckSize, curr_max[1])
        truckSize -= max_boxes
        res += max_boxes * (curr_max[0] * -1)
    
    return res


# test cases
print(maxUnits(3, [1,2,3], 3, [3,2,1], 3))
print(maxUnits(3, [2,5,3], 3, [3,2,1], 50))
    
# prob3                
# s = "11373"

# [11, 37, 3), [113, 7, 3), [11, 3, 73), [11, 37, 3), (113, 73) and [11, 373)
class Solution(object):
    def splitString(self, s):
        self.res = 0
        self.dfs(s, 0)
        return self.res
    
    def dfs(self, s, index):
        if index == len(s):
            self.res += 1
            return 
            
        if s[index] == '0':
            return 
        
        for i in range(index, len(s)):
            if self.isPrime(int(s[index : i + 1])):
                self.dfs(s, i + 1)
                
    def isPrime(self, n): 
  
        # Corner cases 
        if n <= 1 : 
            return False
        if n <= 3: 
            return True
  
    # This is checked so that we can skip  
    # middle five numbers in below loop 
        if (n % 2 == 0 or n % 3 == 0) : 
            return False
  
        i = 5
        while(i * i <= n) : 
            if (n % i == 0 or n % (i + 2) == 0) : 
                return False
            i = i + 6
  
        return True

test = Solution()
print(test.splitString("11373"))


# prob4 
# pages
import math

def sortItems(numOfItems, items, sortPara, sortOrder, itemsPerP, pageNum): 
    items_name = list(items.keys())
    if sortOrder == 0: # increasing
        if sortPara == 0: 
            items_name.sort()
        elif sortPara == 1:
            items_name.sort(key = lambda x : items[x][0])
        else:
            items_name.sort(key = lambda x : items[x][1])
    else:
        if sortPara == 0: 
            items_name.sor(reverse = True)
        elif sortPara == 1:
            items_name.sort(key = lambda x : -items[x][0])
        else:
            items_name.sort(key = lambda x : -items[x][1])
            
    total_page = math.ceil(numOfItems / itemsPerP)
    if pageNum > total_page - 1:
        return []
    
    if pageNum < total_page - 1:
        return items_name[itemsPerP * pageNum  : itemsPerP * (pageNum + 1)]
    
    if pageNum == total_page - 1:
        return items_name[itemsPerP * pageNum : ]
 
print(sortItems(3, {"item1": [10, 15], "item2": [3, 4], "item3": [17, 8]}, 
                1, 0, 2, 1))
        


 # queries cities
 import collections
def queryCities(cities, x, y, queries):
    x_map = collections.defaultdict(list)
    y_map = collections.defaultdict(list)
    
    for i, x_v in enumerate(x):
        x_map[x_v].append(cities[i])
    
    for j, y_v in enumerate(y):
        y_map[y_v].append(cities[j])
        
    res = []
    
    for c in queries:
        nb = []
        index = cities.index(c)
        x_value = x[index]
        y_value = y[index]
        
        if len(x_map[x_value]) > 1 or  len(y_map[y_value]) > 1:
            nbs = x_map[x_value] + y_map[y_value]
            for ele in nbs:
                if ele != c:
                    nb.append(cities.index(ele))
                    
            nb.sort(key = lambda cur_index : (abs(x[index] - x[cur_index]) + abs(y[index] - y[cur_index])))
            res.append(cities[nb[0]])
                    
                                        
        else:
            res.append("NONE")
    return res

print(queryCities(["c1", "c2", "c3"], [3, 2 ,1], [3, 2, 3], ["c1", "c2", "c3"]))
            
            
# remove ids
import collections        
def removeIDs(num, ids, rem):
    cnt = collections.Counter(ids)
    mst_cmn = cnt.most_common()
    while mst_cmn and rem >= mst_cmn[-1][1]:
        rem -= mst_cmn[-1][1]
        mst_cmn.pop()
    #print(mst_cmn)
    return len(mst_cmn)
    
print(removeIDs(6, [1,1,1,2,3,2], 2))

        
        
# sliding window
import sys
def maxSlidingWindow(nums, k):
    
    q = collections.deque([])
    res = -sys.maxsize
    for i, num in enumerate(nums):
        while q and num > nums[q[-1]]:
            q.pop()
        q.append(i)
        if i >= k - 1:
            #res.append(nums[q[0]])
            res = max(res, nums[q[0]])
            
        if i - q[0] + 1 == k:
            q.popleft()
    return res
print(maxSlidingWindow([8, 2, 4], 2))
    
    
def breakPalindrome(palindrome):
    S = palindrome
    #if len(S)
    for i in range(len(S) // 2):
        if S[i] != 'a':
            return S[:i] + 'a' + S[i + 1:]
    return "IMPOSSIBLE"
print(breakPalindrome("aaa"))

    
from heapq import * 
# # def maxProfit(numSupp, inven, order):
# #     inven = [-x for x in inven]
# #     res = 0
# #     heapify(inven)
# #     #print(inven)
# #     while order and inven:
# #         cur_prof = heappop(inven)
# #         res -= cur_prof
# #         #print(inven, res)
# #         cur_prof += 1
# #         order -= 1
# #         if cur_prof < 0:
# #             heappush(inven, cur_prof)
# #     return res
# # 
# # print(maxProfit(2, [3, 5], 6))
            
            
def letter_num(letter):
    numbers = []
    for letter in letter:
        number = ord(letter) - ord('A')
        numbers.append(number)
    return numbers

l1 = "LATE"
l2 = 'MAKE'
l3 = 'EXAM'
#l4 = 'RSTU'


nums1 = letter_num(l1)
nums2 = letter_num(l2)
nums3 = letter_num(l3)
#nums4 = letter_num(l4)

print("num1: ", letter_num(l1))
print("num2: ",letter_num(l2))
print("diff: ", [nums2[i] - nums1[i] for i in range(len(nums1))])
print("num3: ", letter_num(l3))
#print("num4: ", letter_num(l4))


# [-1, 1, 2, -2]
def num_letter(numbers):
    s = ''
    for num in numbers:
        if num > 25:
            num = num % 26
        elif num < 0:
            while num < 0:  
                num += 26
        char = chr(num + ord('A'))
        s += char
        #print(num, char)
    return s

n1 = [4 + 1, 23 + 1, 1, 13]
print(num_letter(n1))

l = [985, 874, 763]
print("diff is: ", [l[i + 1] - l[i] for i in range(len(l) - 1)])

def diff_on_odd_even(l):
    odd = []
    i = 0
    for i in range(0, len(l) - 1, 2):
        if i + 2 < len(l):
            odd.append(l[i + 2] - l[i])
       
    even = []
    j = 1
    for j in range(1, len(l) - 1, 2):
        if j + 2 < len(l):
            even.append(l[j + 2] - l[j])
    
    return odd, even
    
#print("diff in odd and even: ", diff_on_odd_even(l))
print(763 - 111)
