# Method2 recursion

# time O(n^2) since list slice takes O(N)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not inorder:
            return
        root = TreeNode(preorder[0])
        root_index = inorder.index(preorder[0])
        root.left = self.buildTree(preorder[1 : 1 + root_index], inorder[ : root_index])
        root.right = self.buildTree(preorder[1 + root_index : ], inorder[root_index + 1 : ])
        return root
    
    
# optimized: using map to store the val: index pair of each node in inorder traverse
# preorder traverse, for each time pop it from the left, we alwasy get the root
# time O(n), space O(n)
class Solution(object):
    def buildTree(self, preorder, inorder):
        
        if not preorder:
            return None
        if len(preorder) == 1:
            return TreeNode(preorder[0])

        self.inorder_map = {val: index for index, val in enumerate(inorder)}
        self.preorder_q = deque(preorder)

        return self.dfs(0, len(inorder) - 1)

    def dfs(self, start, end):
        if not self.preorder_q:
            return None

        root_val = self.preorder_q.popleft()
        root = TreeNode(root_val)
        root_index = self.inorder_map.get(root_val)
        if root_index != start:
            root.left = self.dfs(start, root_index - 1)
        if root_index != end:
            root.right = self.dfs(root_index + 1, end)
        return root


# Method1 devide and conquer + recursion
# Time Complexity O(n)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        inorder_map = {val:i for i, val in enumerate(inorder)}
        return  self.buildTree_helper(inorder_map, preorder, 0, len(inorder) - 1)
    
    def buildTree_helper(self, inorder_map, preorder, left, right):
        if  not preorder:
            return 
        root_val = preorder.pop(0)
        root = TreeNode(root_val)
        root_index = inorder_map[root_val]
        if root_index != left:
            root.left = self.buildTree_helper(inorder_map,  preorder, left, root_index - 1)
        if root_index != right:
            root.right = self.buildTree_helper(inorder_map, preorder, root_index + 1, right)
        return root


