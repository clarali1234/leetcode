# time O(n - m)) n - m: number of empty cellss
# space O(n - m)

# spiral backtracking
# 这是一道典型的DFS题目，我们可以让robot一直向前扫，直到obstructed。此时我们让robot换一个方向(turnRight)，
# 然后继续move。直到robot到达一个点，这个点前后左右不是blocked就是visited的时候，返回。
# 找到robot在这个点之前的状态，继续尝试换一个方向move。当所有的搜索返回，clean all the available point
# Go forward, cleaning and marking all the cells on the way as visited.
# At the obstacle turn right, again go forward, etc. 
# Always turn right at the obstacles and then go forward. Consider already visited cells as virtual obstacles.

# 换方向, dx, dy, -> -dy, dx (turn right)

class Solution(object):
    def cleanRoom(self, robot):
        
        
        visited = set()
        self.dfs(robot, 0, 0, 0, 1, visited)
        
    
    def dfs(self, robot, x, y, dx, dy, visited):
        robot.clean()
        visited.add((x, y))
        
        for _ in range(4):
            new_x = x + dx
            new_y = y + dy
            if (new_x, new_y) not in visited and robot.move():
                self.dfs(robot, new_x, new_y, dx, dy, visited)
            dx, dy = -dy, dx
            robot.turnRight()
            
        # backtracking
         # go back to previous position
        robot.turnRight()
        robot.turnRight()
        robot.move()
        
        # go back to previous direction
        robot.turnRight()
        robot.turnRight()
        
            
                
        
        
        
        
        
