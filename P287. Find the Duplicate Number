# hash table
# time O(n), space O(n)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        dic = collections.Counter(nums)
        n = len(nums) - 1
        for i in range(1, n + 1):
            if dic[i] > 1:
                return i


1) sort time O(nlgn), space O(1)
class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        for i in range(len(nums) - 1):
            if nums[i] == nums[i + 1]:
                return nums[i]

2) binary search
假设枚举的数字为 n / 2：
遍历数组，若数组中不大于n / 2的数字个数超过n / 2，则可以确定[1, n /2]范围内一定有解，
否则可以确定解落在(n / 2, n]范围内。

sol2: piginhole principle + binary search
# time O(nlgn)
# space O(1)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        i = 1
        j = len(nums) - 1 # n + 1 - n
        
        while i < j:
            m = (i + j) // 2
            less_eq_m = sum([1 if x <= m else 0 for x in nums])
            #print(i, j, m, less_eq_m)
            if less_eq_m > m:
                j = m
            else:
                i = m + 1
            
                
        return i
                
(1) 两者一定会相遇 (2) 它们会在环的入口相遇。 要理解这两点，我们注意由于slow位于x_{l'}，如果我们向前走c步，
那么slow会到达位置x_{l' + c}。由于l'是环长度的倍数，相当于向前走了c步，然后绕环几圈回到原位。
换言之，x_{l' + c} = x_c。另外，考虑finder变量在行进c步之后的位置。 
它由x_0出发，因此c步之后会到达x_c。这证明了(1)和(2)，由此我们已经证明两者最终会相遇，并且相遇点就是环的入口。

证明一定在环入口相遇
1. slow和fast相遇，xj = x2j,j是环长度的倍数（假设环长l)
2. finder从0出发，走c步（假设环前长c), finder:x(c), slow:x(c+j),此时finder和x一定在环入口相遇
nums[a] = b -> a.next = b

time O(n), space O(1)
class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        slow = 0
        fast = 0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        finder = 0
        while True:
            slow = nums[slow]
            finder = nums[finder]
            if slow == finder:
                return finder
根据鸽笼原理，给定n + 1个范围[1, n]的整数，其中一定存在数字出现至少两次。


