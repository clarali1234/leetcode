# sol1: brute force  time O(n^3)
# 注意对于单个的字母是palindrome, count = len(s),开始
class Solution(object):
    def countSubstrings(self, s):
        
        count = 0
        for i in range(len(s)):
            for j in range(i + 1, len(s) +1):
                if s[i : j] == s[i : j][::-1]:
                    count += 1
        return count
                

# so2: 从中心线向两边枚举，右 = 左，或右 = 左 + 1， time O(n^2)
class Solution:
    def countSubstrings(self, s: str) -> int:
        self.res = 0
        for i in range(len(s)):
            self.count_substring_helper(s, i, i)
            self.count_substring_helper(s, i, i + 1)
        return self.res
    
    def count_substring_helper(self, s, i, j):
        while j < len(s) and i >= 0 and i <= j:
            if s[i] == s[j]:
                self.res += 1
                i -= 1
                j += 1
            else:
                break
            
 # follow up
 # return all palindrome substrings
 # two pointers
 # time O(n^2)
 
 class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        res = []
        for i in range(len(s)):
            left = i
            right = i
            res += self.count(s, left, right)
               
            right = i + 1
            res += self.count(s, left, right)
        return res
    
    
    def count(self, s, left, right):
        c = []
        while left >= 0 and right < len(s) and s[left] == s[right]:
            c.append(s[left : right + 1])
            left -= 1 
            right += 1
            
        return c
        
 
 # 动态规划的思想是，类似中心线两边枚举
 # 我们先确定所有的回文，即 string[start:end]是回文. 
 # dp[i][i] = 1, 只包含字符i, dp[i][j]:包含[i->j]之间的字符
 当我们要确定string[i:j] (dp[i][j])是不是回文的时候，要确定：
 string[i] 等于 string[j]吗?
 string[i+1:j-1]是回文吗?

 # dp[i][j]
 # dp, time O(n^2), space O(n^2)
 class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        res = 0
        n = len(s)
        dp = [[0] * n for _ in range(n)]
        
        for i in range(n):
            dp[i][i] = 1
            res += 1
            
        for i in range(n-2, -1, -1):
            for j in range(i + 1, n):
                if j == i + 1 and s[j] == s[i]:
                    dp[i][j] = 1
                    res += 1
                elif j > i + 1 and dp[i + 1][j - 1] and s[i] == s[j]:
                    dp[i][j] = 1
                    res += 1
        return res
                    
