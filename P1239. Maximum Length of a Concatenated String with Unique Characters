
# combination, each elemenet choose add or not add (2^n) choices

# time O(n*2^n)
# space O(2^n)

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        self.res = 0
        self.dfs(arr, 0, '', 0)
        return self.res
    
    def dfs(self, arr, index, cur_path, cur_len):
        for i in range(index, len(arr)):
            if len(cur_path + arr[i]) == len(list(set(cur_path + arr[i]))):
                self.res = max(self.res, len(arr[i] + cur_path))
                self.dfs(arr, i + 1, cur_path + arr[i], cur_len + len(arr[i]))
            self.dfs(arr, i + 1, cur_path, cur_len)
