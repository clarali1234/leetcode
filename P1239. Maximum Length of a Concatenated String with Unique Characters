
# combination, each elemenet choose add or not add (2^n) choices

# time O(n*2^n)
# space O(2^n)

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        self.max_len = 0
        self.dfs(arr, 0, '')
        return self.max_len
    
    def dfs(self, arr, index, path):
        for i in range(index, len(arr)):
            new_path = path + arr[i]
            if len(new_path) == len(list(set(new_path))):
                self.max_len = max(self.max_len, len(new_path))
                self.dfs(arr, i + 1, new_path)
