
# combination, each elemenet choose add or not add (2^n) choices

# time O(n*2^n)
# space O(2^n)

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        self.res = 0
        self.dfs(arr, 0, '')
        return self.res
    
    def dfs(self, arr, index, path):
        for i in range(index, len(arr)):
            if len(path + arr[i]) != len(set(path + arr[i])):
                continue
            self.res = max(self.res, len(path + arr[i]))
            self.dfs(arr, i + 1, path + arr[i])
