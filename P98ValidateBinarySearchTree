class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True

        self.res = True
        self.dfs(root, -sys.maxsize, sys.maxsize)
        return self.res

    def dfs(self, node, lower_limit, upper_limit):
        if not node:
            return 

        if node.val <= lower_limit or node.val >= upper_limit:
            self.res = False

        self.dfs(node.left, lower_limit, node.val)
        self.dfs(node.right, node.val, upper_limit)



1. 暴力解：in-order traversal, 如果不是sorted或者有重复元素则返回false
    time O(nlgn), space: O(h)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        self.in_order = []
        self.dfs(root)
        return self.in_order == sorted(self.in_order) and len(self.in_order) == len(set(self.in_order))
    
    def dfs(self, root):
        if not root:
            return None
        self.dfs(root.left)
        self.in_order.append(root.val)
        self.dfs(root.right)


2. 递归。
    time O(n), space O(h)
   
# dfs travsesal of each node within the range limit
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if not root:
            return True
        return self.helper(root, sys.maxsize, -sys.maxsize)
    
    def helper(self, node, maximum, minimum):
        if not node:
            return True
        if node.val >= maximum or node.val <= minimum:
            return False
        return self.helper(node.left, node.val, minimum) and self.helper(node.right, maximum, node.val)
             
# recursion with stack
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if not root:
            return True
        stack = [(root, -sys.maxsize, sys.maxsize)]
        while stack:
            cur, min_, max_ = stack.pop()
            if not cur:
                continue
            if cur.val >= max_ or cur.val <= min_:
                return False
            stack.append([cur.left, min_, cur.val])
            stack.append([cur.right, cur.val, max_])
        return True
        
