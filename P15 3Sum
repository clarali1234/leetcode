# brute-force O(n^3)



注意去重的位置
## sort + two pointers
# time O(n^2) （sort: O(nlgn), algo: O(n^2))
# space O(1)
# 思路： 枚举第一个数，然后进行two sum, 若第一个数和前一个数相同则跳过
# 固定第一个数，对于two sum,当找到一个triple时，则继续进行search，再次判断当前的数是否和前一个数相同

class Solution(object):
    def threeSum(self, nums):
        
        self.res = []
        nums.sort()
        n = len(nums)
        for i, num in enumerate(nums):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            else:
                self.find_two(nums, i + 1, n - 1, -num)
        return self.res 
    
    
    def find_two(self, nums, i, j, target):
        while i < j:
            if nums[i] + nums[j] == target:
                self.res.append((-target, nums[i], nums[j]))
                i += 1
                j -= 1
                # 2. 添加完当前的triple之后再去重
                while i < j and nums[i] == nums[i - 1]:
                    i += 1
                while i < j and nums[j] == nums[j + 1]:
                    j -= 1
            elif nums[i] + nums[j] < target:
                i += 1
            else:
                j -= 1



##########################################################################
class Solution(object):
    def threeSum(self, nums):
        nums.sort()
        res = []
        for i in range(len(nums) - 2):
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            j, k = i + 1, len(nums) - 1

            while j < k:
                total = nums[i] + nums[j] + nums[k]
                if total > 0:
                    k -= 1
                elif total < 0:
                    j += 1
                else:
                    res.append([nums[i], nums[j], nums[k]])
                    j += 1
                    while  nums[j] == nums[j - 1] and j < k:
                        j += 1
                        
                #print(i, j, k)
        return res


        
        
# follow up: without duplicate, without sort
# nums = set(nums)
# time O(n^2)
# space O(n)
hash key:value, value = list of index
for i in range(len(nums) - 2):
    for j in range(i+1, len(nums) - 1):
        if -nums[i] - nums[j] in dic and len(dic.get(-nums[i] - nums[j])) == 1 and  dic.get(-nums[i] - nums[j])> j:
            res.append(nums[i], nums[j], -nums[i] - nums[j] )
        elif -nums[i] - nums[j] in dic and len(dic.get(-nums[i] - nums[j])) > 1:
            for index in dic.get(-nums[i] - nums[j]):
                if index > j:
                    res.append(nums[i], nums[j], -nums[i] - nums[j] )
                
                
# follow up time O(n^2lgn), space O(1)
# fix 1, fix2  + binary search (need sort before)


# follow up 
# follow up问数组里的值能重复使用怎么办？用了类似combination sum的方法递归求解。
nums = [100, -100, 200]
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return []
        
        self.res = []
        self.dfs(nums, 0, len(nums), 0, 0, [])
        return self.res
    
    def dfs(self, nums, start, end, count, target, path):
        #print(count, target)
        if count == 3 and target == 0:
            self.res.append(path)
            return 
        elif count == 3:
            return 
        
        for i in range(start, len(nums)):
            self.dfs(nums, i, end, count + 1, target - nums[i], path + [nums[i]])
            
test = Solution()
print(test.threeSum(nums))
