# quick sort
# divide and conquer algorithm
# choose a pivot, partition the array into two halves, recusivly call quick sort for these two halves


# O(nlgn) -> O(n^2)
# space O(lgn) -> O(n) (inplace, depth of recursion)

class Solution(object):
    def quickSort(self, nums):
        
        self.partition(nums, 0, len(nums) - 1)
        return nums
        
    
    def partition(self, nums, l, r):
        if l >= r:
            return 
        
        i = l
        j = r
        pivot = nums[j]
        while i <= j:
            while i <= j and nums[i] < pivot:
                i += 1
            while i <= j and nums[j] > pivot:
                j -= 1
                
            if i <= j:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1
            
        self.partition(nums, l, j)
        self.partition(nums, i, r)

test = Solution()
print(test.quickSort([1, 7, 8, 2, 3]))

# merge sort 
# divide and conquer algorithm
# divide the array into two half -> call merge sort for these two half -> merge two sorted halves

# time O(nlgn) T(n) = T(n/2) + O(n)
# space O(n)
class Solution(object):
    def mergeSort(self, nums):
        if not nums or len(nums) == 1:
            return nums
        
        m = len(nums) // 2 
        l = self.mergeSort(nums[:m])
        r = self.mergeSort(nums[m:])

        return self.merge_two(l, r)
    
    def merge_two(self, l, r):
        
        res = []
        i = 0
        j = 0
        while i < len(l) and j < len(r):
            if l[i] <= r[j]:
                res.append(l[i])
                i += 1
            else:
                res.append(r[j])
                j += 1
            
        
        if i < len(l):
            res += l[i:]
        
        if j < len(r):
            res += r[j:]
        return res
    

test = Solution()
print(test.mergeSort([7, 2, 8, 19, 2, 3, 6]))


# quick select
# time O(n) -> O(n^2)
# space O(lgn) -> O(n)

class Solution(object):

    def find_k_smallest(self, nums, k):
        if not nums:
            return -1
        return self.quick_select(nums, 0, len(nums) - 1, k)

    def quick_select(self, nums, start, end, k):
        if start == end:
            return nums[start]

        left = start
        right = end
        pivot = nums[(start + end) // 2]

        while left <= right:
            while left <= right and nums[left] < pivot:
                left += 1

            while left <= right and nums[right] > pivot:
                right -= 1

            if left <= right:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1

        if start + k - 1 <= right:
            return self.quick_select(nums, start, right, k)

        elif start + k - 1 >= left:
            return self.quick_select(nums, left, end, k - (left - start))
        else:
            return nums[right + 1]


if __name__ == '__main__':
    nums = [1, 3, 2, 4, 5]
    k = 3
    test = Solution()
    print(test.find_k_smallest(nums, k))
