'''
Element       NGE
   4      -->   5
   5      -->   25
   2      -->   25
   25     -->   -1
   
 # nums: [4, 5, 2, 25]
 #  res: [5, 25, 25, -1]
 
 # brute force 2 for loop
 
 # stack start from end 
 # pop elements in stack <= ele
 # if stack. res add top, else -1
 # append(cur ele to stack)
 

'''

# 4
# stack [25, 5]
# res [5, 25, 25, -1] 

class Solution(object):
    def nextGreaterElement(self, nums):
        res = [-1 for _ in range(len(nums))]
        for i in range(len(nums)):
            if i == len(nums) - 1:
                continue
            for j in range(i + 1, len(nums)):
                if nums[j] > nums[i]:
                    res[i] = nums[j]
                    break
        return res
    
    def nextGreaterElement2(self, nums):
        res = [-1 for _ in range(len(nums))]
        stack = []
        for i in range(len(nums) -1, -1, -1):
            while stack and stack[-1] <= nums[i]:
                stack.pop()
            if stack:
                res[i] = stack[-1]
            stack.append(nums[i])
        return res
    
test = Solution()
num =  [4, 5, 2, 25]
print(test.nextGreaterElement(num))
print(test.nextGreaterElement2(num))





'''
Description: Given a String s, a sub-string is defined as a non-empty string that can be obtained by applying following operation

Remove zero or 1 character from left side of s
Remove zero or 1 character from right side of s
Remove zero or 1 character from left & right side of s

Find how many distinct sub-string possible.
Characters in string are [a-z]
String length can be up to 10^5


abcde -> bcde/abcd/bcd

abcd
bcde
abc
bcd
bcd
cde

'''

# brute force time 

class Solution(object):
    def substring(self, s):
        self.res = set()
        self.dfs(s)
        return self.res
    
    def dfs(self, s):
        if not s:
            return 
        self.res.add(s)
        self.dfs(s[1:])
        self.dfs(s[:-1])
        if len(s) > 2:
            self.dfs(s[1:-1])
                 
        
        
class Solution2(object):
    def substring(self, s):
        self.dic = {}
        return set(self.dfs(s))
        
    
    def dfs(self, s):
        if not s:
            return []
        
        if s in self.dic:
            return self.dic[s]
        
        res = [s]
        res1 = self.dfs(s[1:])
        res2 = self.dfs(s[:-1])
        res3 = self.dfs(s[1:-1])
        res = res + res1 + res2 + res3
        self.dic[s] = res
        return res
        
        
        
test = Solution()
s = 'abcde'
print(test.substring(s))

test2 = Solution2()
s = 'abcde'
print(test2.substring(s))
        

'''
transform digit

123 # digit, c

112233

using with out string
'''

# num % 10 digit
# num // 10 -> num


class Solution:
    def convert_digit(self, num):
        stack = [] # digit, freq
        while num:
            cur_digit = num % 10
            num = num // 10
            #print(num)
            if not stack or cur_digit != stack[-1][0]:
                stack.append([cur_digit, 1])
            else:
                stack[-1][1] = stack[-1][1] + 1
        print(stack)
        res = 0
        while stack:
            digit, count = stack.pop()
            res = res * 10 + count
            res = res * 10 + digit
        return res
                
         
test = Solution()
s = 111 # 31
num = 123
print(test.convert_digit(s))
print(test.convert_digit(num))
                
                
        


1. merge interval 只要求return merge完以后的array大小，要求O(1) space. 
# keep track of current end and res
# [[1,3],[2,6],[8,10],[15,18]] -> 3

class Solution:
    def merge(self, intervals):
        if not intervals:
            return 0
        intervals.sort()
        cur_e = 0
        res = 0
        for s, e in intervals:
            if cur_e == 0 or s > cur_e:
                res += 1
                cur_e = e
            else:
                cur_e = max(cur_e, e)
        return res
    
test = Solution()
l = [[1,3],[2,6],[8,10],[15,18]]
print(test.merge(l))
                
                
2. # 第一题 给一个string set, generate all sub set of the string. inptut: {'a', 'b', 'c'} output: {'a', 'b', 'c', 'ab', 'ac', 'bc', 'abc'}

class Solution:
    def subset(self, s):
        self.res = []
        self.dfs(s, 0, '')
        return self.res
        
    def dfs(self, s, index, path):
        if path:
            self.res.append(path)
            
        for i in range(index, len(s)):
            self.dfs(s, i + 1, path + s[i])
            
test = Solution()
s = 'abc'
print(test.subset(s))

# 一个 字符串 remove 所有 frequency 大于 1 的字符， follow up: output 要 是 sorted的。 一开始我直接字符串拼接成答案，被问python 字符串拼接的时间复杂度和怎么体现在内存分配上，我意识到他希望我不要一直做字符串拼接很消耗内存，就说可以用fixed size的数组来存output最后拼起来。

# 'dbbba' -> ad

class Solution:
    def removeFreq1(self, s):
        freq = [0 for _ in range(26)]
        for char in s:
            freq[ord(char) - ord('a')] =  freq[ord(char) - ord('a')] + 1
            
        res = ''
        #print(freq)
        for unicode, count in enumerate(freq):
            if count == 1:
                #print(count, unicode)
                res += chr(unicode + ord('a')) * count
        return res
            
            
        
            
test = Solution()
s = 'abc'
print(test.removeFreq1(s))
                


1. '''
Q1: Collatz conjecture
Given a number n, return number of steps it takes to bring n down to 1 using the following operations:
if n is even, n = n / 2;
if n is odd, n = 3n + 1
example: n = 5
5 → 16 → 8 → 4 → 2 → 1
return 5
it is guaranteed that there will not be any cycles in the sequence


Q2: optimize previous question
if at first we call collatz(5), we return 5 and we know the time complexity is O(n). optimize the solution such that if we call collatz(16), we return 4 and time complexity needs to be O(1).
In other words, if it is the first time we have seen the input, the time complexity can be O(n). If we have seen the number before, the time complexity must be O(1).

'''

class Solution1(object):
    def collatzConjecture(self, n):
        self.dic = {} # key: n, val: steps
        return self.dfs(n)
    
    def dfs(self, n): 
        if n == 1:
            return 0
        
        if n % 2:
            return 1 + self.dfs(n * 3 + 1)
        return 1 + self.dfs(n // 2)
    
        
test1 = Solution1()
print(test1.collatzConjecture(10))
print(test1.collatzConjecture(5))
print(test1.collatzConjecture(16))
            

class Solution(object):
    def collatzConjecture(self, n):
        self.dic = {} # key: n, val: steps
        return self.dfs(n)
    
    def dfs(self, n):
        if n in self.dic:
            return self.dic[n]
        
        if n == 1:
            self.dic[n] = 0
            return 0
        
        res = 1
        if n % 2:
            res += self.dfs(3 * n + 1)
        else:
            res += self.dfs( n // 2)
        self.dic[n] = res
        return res
    
test = Solution()
print(test.collatzConjecture(10))
print(test.collatzConjecture(5))
print(test.collatzConjecture(16))
            

2.'''
第一个OOD是记录访问网站的URL，并按照访问次序（先进后出）输出，要求不能出现重复的URL

比如依次访问ABCB，要求输出BCA

我是用hashset+array做的，一个保证不重复，一个保证次序

'''

class Solution1(object):
    def printURL(self, l):
        
        res = []
        url_set = set()
        for i in range(len(l) - 1, -1, -1):
            if l[i] in url_set:
                continue
            res.append(l[i])
            url_set.add(l[i])
        return res
        

test1 = Solution1()
print(test1.printURL(['A', 'B', 'C', 'B']))

3. 
'''
第二道题：

给一个string，要求输出最内层括号中的字符串


"ab(cd(e)fg)" => "e"
"Hello World!" =>"Hello World!"
"ab{cd[ef]}gh(hello{hi}a)" =>"ef", "hi"


'''

class Solution(object):
    def interString(self, s):
        depth = 0
        dic = {}# key: depth, val: str
        l_paren = ['(', '[', '{']
        r_paren = [']', '}', ')']
        max_depth = 0
        for i, char in enumerate(s):
            if char in l_paren:
                depth += 1
                max_depth = max(max_depth, depth)
            elif char in r_paren:
                depth -= 1
            else:
                dic[depth] = dic.get(depth, '') + char
        print(dic)
        return dic[max_depth]

test = Solution()
print(test.interString('ab(cd(e)fg)'))
print(test.interString('Hello World!'))
print(test.interString('ab{cd[ef]}gh(hello{hi}a)'))

4. trapping water那一题，中间是有0的，表示水可以漏出去
# 是0的话不可以存水， 那我们可以把这个array分成好几个array，在0的地方砍开，然后一段一段算能存多少水。

class Solution(object):
    def trappingRainWater(self, heights):
        res = []
        tmp = []
        for i, h in enumerate(heights):
            if h == 0 or i == len(heights) - 1:
                if tmp:    
                    res.append(tmp)
                    tmp = []
            else:
                tmp.append(h)
        return res
    

5. 连续三个以上糖果会消除，返回多次消除后的结果
def solution(s):
    res = []
    temp = 0
    for char in s:
        if char != temp:
            res.append(char)
        if len(res) > 2:
            if res[-3] == res[-2] == res[-1]:
                temp = res[-1]
                res = res[:-3]
    return "".join(res)

print(solution('ABCDDDDCCB'))
print(solution("aabbbbaccddddc"))
print(solution("aabba"))
print(solution("12221"))
print(solution("1222113331"))

6. '''
a string contains only 1 and 0. "?" could be either one. What are the combinations of "??10" etc. 

'''



class Solution(object):
    def stringCombination(self,s):
        self.dic = {}
        self.res = []
        self.dfs(s, 0, '')
        return self.res
    
    def dfs(self, s, index, cur_res):
        
        if index == len(s):
            self.res.append(cur_res)
            return 
        
        if s[index] == '?':
            self.dfs(s, index + 1, cur_res + '1')
            self.dfs(s, index + 1, cur_res + '0')
        else:
            self.dfs(s, index + 1, cur_res + s[index])

  
        
test = Solution()
print(test.stringCombination('??10'))


# 1,2,2,2,1,1,3,3,3,1




1.	Get top K

我拿到的是说会有一个（公司名，值）的数据流，让你实现加值进去（如果公司已经存在了就把值加上去）和返回topK股票价值的公司
第一个是add vol 给的 ticker 和 vol， 比如amzn 本来是 300，给amzn 500后 amzn 得对应 800， 第二个接口是返还 top k 要求sorted

思路:
'''
# sol1: heap + hashmap
# initial heapify, time O(n)
# time: update : pop stock from heap, add new to heap, O(n), if not in dic, update O(lgn) 

# sol2 : hashtable + double linked list
# initial hashtable, sort by values, and build k size linked list, smallest is head, O(nlgn)  
# update: O(k)
case 1: update one in top k      
    remove the node from linked list
    compare from smallest
    insert/add
    
    2. not in top k
    compare from smallest O(k)
    insert/add O(1)
'''

# brute force 
# time get top k O(nlgn)

class Solution(object):
    def StockTicket(self, stocks):
        self.dic = {}
        for name, amount in stocks:
            if name in self.dic:
                self.dic[name] += amount
            else:
                self.dic[name] = amount
        
    def add_vol(self, ticket, vol):
        self.dic[ticket] += vol
    
    def get_top_k(self, K):
        paires = list(self.dic.items())
        paires.sort(key = lambda x : -x[1])
        return [x[0] for x in paires[:K]]
        
           
test = Solution()
test.StockTicket([('Amazon', 500), ('Facebook',800), ('Google', 1000)])
test.add_vol('Amazon', 2000)
print(test.get_top_k(2))

# sorted dict
# key: -amount, value: name
# get top k O(K)
# add_vol O(lgn)
    
from sortedcontainers import SortedDict
    
class Solution2(object):
    def StockTicket(self, stocks):
        self.dic = {}
        self.sortedDict = SortedDict() # key :amount, value:set(names)
        for name, amount in stocks:
            if name in self.dic:
                self.dic[name] -= amount
            else:
                self.dic[name] = -amount
            
            if amount not in self.sortedDict:
                self.sortedDict[-amount] = set()
            self.sortedDict[-amount].add(name)
            
        
    def add_vol(self, ticket, vol):
        
        if ticket in self.dic:
            prev_vol =  self.dic[ticket]
            self.sortedDict[prev_vol].remove(ticket)
            new_vol = prev_vol - vol
            if new_vol not in self.sortedDict:
                self.sortedDict[new_vol] = set()
            self.sortedDict[new_vol].add(ticket)
        else:
            if -vol not in self.sortedDict:
                self.sortedDict[-vol] = set()
            self.sortedDict[-vol].add(ticket)
        self.dic[ticket] = self.dic.get(ticket, 0) - vol
            
            
    def get_top_k(self, K):
        res  = []
        c = 0
        for amount, names in self.sortedDict.items():
            for name in names:
                res.append(name)
            c += 1
            if c == K:
                break
        return res
                
            
        

test2 = Solution2()
test2.StockTicket([('Amazon', 500), ('Facebook',800), ('Google', 1000)])
test2.add_vol('Amazon', 2000)
print(test2.get_top_k(2))



# sol1: heap + hashtable, # key: name, val: stock node in heap

from heapq import * 
import collections
class StockSystem(object):
    def __init__(self, stocks):
        self.dic = {}  # key: name, val: stock node in heap
        self.heap = []
        for (stock, vol) in stocks:
            entry = [-vol, stock]
            self.heap.append(entry)
            self.dic[stock] = entry
            
        heapify(self.heap)
                
    def update(self, stock, vol):
        if stock in self.dic:
            self.dic[stock][0] -= vol
            heapify(self.heap)    
        else:
            new = [-vol, stock]
            heappush(self.heap, new)
            self.dic[stock] = new
                     
        
    def get_top_k(self, k):
        res = self.heap[:k]
        res = [[x[1], -x[0]] for x in res]
        return res
    

test = StockSystem([('Amazon', 500), ('Facebook',800), ('Google', 1000)])
print(test.get_top_k(2))
test.update('Amazon', 700)
print(test.get_top_k(2))
test.update('Microsoft', 2000)
print(test.get_top_k(2))

# sol2, two hashtable + linked list
# dic1: key: stock, val: vol
# dic2: key: stock, val: linked list node 
# initialize :time O(nlgn)
# update: time O(k)

from heapq import * 
import collections

class ListNode(object):
    def __init__(self, stock, vol):
        self.stock = stock
        self.vol = vol
        self.prev = None
        self.next = None
        
class StockSystem(object):
    def __init__(self, stocks, k):
        self.dic = {}  # key: name, val: stock node in heap
        self.dic_node = {} # key: stock, val: list node 
        self.heap = []
        self.dummy_head = ListNode('', 0)      
        self.dummy_tail = ListNode('', 0)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head
        
        
        l = []
        for s, v in stocks:
            self.dic[s] = v
            l.append([s, v])
            
        l.sort(key = lambda x:-x[1])
        cur = self.dummy_head
        
        for i in range(k):
            stock, vol = l[i]
            node = ListNode(stock, vol)
            node.prev = cur
            cur.next = node
            cur = cur.next
            self.dic_node[stock] = node
        cur.next = self.dummy_tail # tail is smallest
        self.dummy_tail.prev = cur
        
            
    def update(self, stock, vol):
        if stock in self.dic_node:
            self.delete[self.dic_node[stock]]
            
        prev_val = self.dic[stock]
        cur_val = prev_val + vol
        self.dic[stock] = cur_val
        
        
        if cur_val > self.dummy_tail.prev.vol:
            # find first node such that cur_val > node.val
            node = ListNode(stock, cur_val)
            cur = self.dummy_head.next
            while cur.next.vol > cur_val:
                cur = cur.next
            self.insert(cur, node)
            self.dic[stock] = node
    
        
    def get_top_k(self, k):
        res = []
        cur = self.dummy_head.next
        
        for _ in range(k):
            res.append([cur.stock, cur.vol])
            cur = cur.next
        return res
            
    
    def delete(self, node): # remove tail
        prev = node.prev
        nxt = node.next
        prev.next = nxt
        nxt.prev = prev
        
    def insert(self, node, new):
        nxt = node.next
        node.next = new
        new.prev = node
        new.next = nxt
        nxt.prev = new
        
        
        

test = StockSystem([('Amazon', 500), ('Facebook',800), ('Google', 1000)], 2)
print(test.get_top_k(2))
test.update('Amazon', 700)
print(test.get_top_k(2))


                
3. '''
6.    UDP那个题前人写过。就是写一个函数，输入是一个数据包，比如1 -> A, 2 -> B, 4->C, 3->D。数字是UDP数据包的标号，字母是内容。如果新接收到的数据包是下个期待的包,就打印出来，如果不是就存下来，等期待的包到之后一起打印。上面例子打印. 输出应该是1 -> A, 2 -> B, 3 -> D, r->C。
就是如果遇见1就输出，如果没遇见1，只遇2，就得等遇到1再同时输出1，2，依次类推按序输出。
比如input:(2,x) (1,x) (3,x)
output: (1,x) (2,x) (3,x)

就用了hashmap存储和一个index记录需要print的package id.
follow up: 如果某一个package被drop了该怎么处理
'''

from heapq import *
class Solution(object):
    def print(self, seq):
        self.cur_print = 1
        self.q = []
        for time, char in seq:
            if time == self.cur_print:
                print((time, char))
                while self.q and self.q[0][0] == self.cur_print + 1:
                    print(heappop(self.q))
                    self.cur_print += 1
                self.cur_print += 1
            else:
                heappush(self.q, (time, char))
                
                         
test = Solution()
test.print([(2, 'x'), (1, 'x'), (3, 'x')])

'''
⼤致就是每次给⼀个get_seq（seq，char），会多次调⽤
结果要求按序输出，且输出越快越好，所以不能等全部拿到后在sort然后输出
就是如果遇⻅1就输出，如果没遇见1，只遇2，就得等遇到1再同时输出1，2，依次类推按序输出。
⽐如input:(2,x) (1,x) (3,x)
output: (1,x) (2,x) (3,x)


    2 4 1 3

i   1 1 3 
p       1 2 3 4 
hashmap/heap

'''

# num % 10 digit
# num // 10 -> num


import heapq

class Solution:
    def udp(self, s):
        dic = {}
        cur_num = 1
        res = []
        for num, content in s:
            if num == cur_num:
                res.append([num, content])
                while cur_num + 1 in dic:
                    cur_num += 1
                    item = [cur_num, dic.get(cur_num)]
                    res.append(item)
                    del dic[cur_num]
                cur_num += 1
            else:
                dic[num] = content
        return res
    
    def udp2(self, s):
        heap = []
        res = []
        cur_num = 1
        for num, char in s:
            if cur_num == num:
                res.append([num, char])
                cur_num += 1
                while heap and heap[0][0] == cur_num:
                    item = heapq.heappop(heap)
                    res.append(item)
                    cur_num += 1
            else:
                heapq.heappush(heap, [num, char])
        return res
                    
                         
            
test = Solution()
s = [[2,'a'], [1,'b'], [3,'c']]
s2 = [[2,'a'], [4, 'd'], [1, 'a'], [3, 'c']]
print(test.udp(s))
print(test.udp(s2))
print(test.udp2(s))
print(test.udp2(s2))
                
                
       
       
4.'''
3.    马拉松
Assume racers passing through diff gates... we design to track the record, that when the racers passed the gates.. and an API to return the ordering of runners when called.
e.g
G0       G1        G2       G3
R1       R3        R4       R5
         R2

When get order is called, return R5, R4, R3, R2, R1

just LRU 變種，用LinkedList and hashmap to make tracking O(1), get order is then just iterate through the List of  LinkedList (each gate a doubly linkedlist)

设计一个马拉松class，包括一个运动员跑过marker的function以及随时可能被调用的return top k players的function. 用dictionary 和double linked list 做的
'''

import collections
class ListNode(object):
    def __init__(self, gate):
        self.gate = gate
        self.prev = None
        self.next = None


class Solution(object):
    def __init__(self, gates):
        self.dic1 = collections.defaultdict(list) # key: gate, value: list of racers
        self.dummy_head = ListNode(-1)
        self.dummy_tail = ListNode(-1)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head
        cur = self.dummy_head
        
        for i, players in gates:
            node = ListNode(i)
            cur.next = node
            node.prev = cur
            self.dic1[node] = players
            cur = cur.next
        cur.next = self.dummy_tail
        self.dummy_tail.prev = cur
        
    def get_order(self):
        
        cur = self.dummy_tail
        res = []
        
        while cur.prev.gate >= 0:
            res += self.dic1[cur.prev]
            cur = cur.prev
        return res
    
test = Solution([(0, ['R0']),(1, ['R3', 'R2']), (2, ['R4']), (3, ['R5'])])           
print(test.get_order())
        
        
'''
是给一个list of string {'10','01','1011',..} 其中string 只包含0和1
然后跟你讲了两个string 找difference的rule是 从第一个不一样的位置开始算比如10和011的diff是3 011和001的diff是2

要求找到这一个list of string中任意两个string之间的maximum difference
一开始没想出来 最后面试官提示说吧string换成binary tree 再search

思路:不用那么复杂 构建binary tree left child是1 right child是0 
最大diff就是第一层左右都有孩子之后 最长的那条路径
'''
import collections

class TreeNode(object):
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

       
class Solution(object):
    def maxDiff(self, l):
        
        root = TreeNode(-1)
        
        # build tree
        for s in l:
            cur = root
            for char in s:
                if char == '0':
                    if not cur.right:
                        node = TreeNode(0)
                        cur.right = node
                    cur = cur.right
                elif char == '1' :
                    if not cur.left:
                        node = TreeNode(1)
                        cur.left = node
                    cur = cur.left

    
        # 最大diff就是第一层左右都有孩子之后 最长的那条路径
        # first node with left and right children (bfs)
        
        node = self.find_node_l_r(root)
        if not node:
            return 0
        return self.max_len(node) - 1
        #return 0
    
    def find_node_l_r(self, root):
        if not root:
            return None
        
        if root.left and root.right:
            return root
        
        if root.left:
            return self.find_node_l_r(root.left)
            
        if root.right:
            return self.find_node_l_r(root.right)
            
    
    def max_len(self, node):
        if not node:
            return 0
        
        self.res = 0
        self.dfs(node, 1)
        return self.res
        
    
    def dfs(self, node, cur_len):
        if not node.left and not node.right:
            self.res = max(self.res, cur_len)
            return 
        
        if node.left:
            self.dfs(node.left, cur_len + 1)
        if node.right:
            self.dfs(node.right, cur_len + 1)
            

        
test = Solution()

#print(test.maxDiff(['01', '10','101']))
print(test.maxDiff(['01', '001']))

# test case 2: '01', '001' -> return 2

        
 
 
        
