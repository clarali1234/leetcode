# brute force
# time O(mn)
# space O(m)

class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        
        res = []
        for num in nums1:
            nxt_greater = self.next_greater(nums2, num)
            res.append(nxt_greater)
        return res
    
    def next_greater(self, nums2, num):
        index = nums2.index(num)
        for i in range(index, len(nums2)):
            if nums2[i] > num:
                return nums2[i]
        return -1
            
            
2. stack + hashmap
思路: 先处理 nums2, -> hashtable, key: num, ele: next greater element
# descreasing stack
# n2 = [2, 1, 3, 4]
# stack [2, 1, ] -> [3]

time O(m + n)
space O(m + n)

class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        
        stack = []
        dic = {}
        
        for i in range(len(nums2) - 1, -1, -1):
            num = nums2[i]
            while stack and stack[-1] < num:
                stack.pop() 
            if not stack:
                dic[num] = -1
            else:
                dic[num] = stack[-1] 
            stack.append(num)
            
        
        res = []
        for num in nums1:
            res.append(dic[num])
        return res
        
            
