class Solution(object):
    def cloneGraph(self, node):
        if not node:
            return None

        self.visited = {}
        self.dfs(node)
        return self.visited[node]

    def dfs(self, node):
        if not node:
            return 

        if node not in self.visited:
            self.visited[node] = Node(node.val)

        for nb in node.neighbors:
            if nb not in self.visited:
                self.visited[nb] = Node(nb.val)
                self.dfs(nb)
            self.visited[node].neighbors.append(self.visited[nb])
            
            




# BFS
# time O(v+e)
# space O(v)
clone each node, put the node, copy pair into dic, add just copied node into queue, bfs traversal copied node
pop out, traverse each nb, if nb not copy, copy it and put into q, add copied neighbors


class Solution(object):
    def cloneGraph(self, node):
        
        if not node:
            return None
        
        dic = {}
        q = collections.deque([node])
        dic[node] = Node(node.val) # 注意初始时讲node放入dic
        
        while q:
            cur_n = q.popleft()
            for nb in cur_n.neighbors:
                if nb not in dic: 
                    dic[nb] = Node(nb.val)
                    q.append(nb)
                dic[cur_n].neighbors.append(dic[nb])
        return dic[node]
                

# DFS
# time O(V + E), we need to process each node only once
# space O(N), O(N) for hash table, O(H) for recursion, H is the height of graph

class Solution:
    def cloneGraph(self, node):
        return self.dfs(node, {})
 
    def dfs(self, node, visited):
        if not node:
            return None
        if node in visited:
            return visited[node]
        
        node_copy = Node(node.val, [])
        # 注意 1. copy 之后把node_copy放入visited里面
        visited[node] = node_copy
        # 2.对每个邻居调用dfs函数
        for neighbor in node.neighbors:
            neighbor_copy = self.dfs(neighbor, visited)
            # 3.check if neighbor_copy is None
            if neighbor_copy:
                node_copy.neighbors.append(neighbor_copy)
        return node_copy
        
 #    1
#   /
#  2 - 3

node1 = Node(1, [])
node2 = Node(2, [])
node3 = Node(3, [])
# 注意2 添加neighbor时是append
node1.neighbors.append(node2)
node2.neighbors.append(node1)
node2.neighbors.append(node3)
node3.neighbors.append(node2)
print(node1.val)
print(node1.neighbors)

test = Solution()
node1_copy = test.cloneGraph(node1)
print(node1_copy.neighbors[0].val)




# DFS iterative
class Solution:
    def cloneGraph(self, node):
        visited = {}
        node_copy = Node(node.val, [])
        visited[node] = node_copy
        stack = [node]
        while stack:
            cur_node = stack.pop()
            if cur_node:
                for neighbor in cur_node.neighbors:
                    if neighbor not in visited:
                        visited[neighbor] = Node(neighbor.val, [])
                        stack.append(neighbor)
                    visited[cur_node].neighbors.append(visited[neighbor])
        return node_copy
                       
