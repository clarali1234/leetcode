# brute force 
# simulation

# time O(n)
# space O(1)
class Solution:
    def compress(self, chars: List[str]) -> int:
        if len(chars) <= 1:
            return len(chars)
        cur = chars[0]
        res = ''
        length = 1
        for i in range(1, len(chars)):
            if chars[i] == cur:
                length += 1
            if chars[i] != cur or i == len(chars) - 1:
                if length == 1:
                    res += cur
                else:
                    res += cur
                    res += str(length)
                length = 1
                cur = chars[i]
        return len(res)


# three pointers
# time O(n)
# space O(1)
使用两个指针 read 和 write 分别标记读和写的位置。读写操作均从左到右进行：读入连续的一串字符，然后将压缩版写到数组中。
最终，write 将指向输出答案的结尾。

保留指针 anchor(repeat_index)，指向当前读到连续字符串的起始位置。
从左到右进行读取。当读到最后一个字符，或者下一个下一个字符与当前不同时，则到达连续区块的结尾。

当我们到达连续区块的结尾时，就从 write 写入压缩的结果。chars[anchor] 为字符，read - anchor + 1 （若大于 1）为长度。


class Solution:
    def compress(self, chars: List[str]) -> int:
        w = 0
        r = 0
        anchor = 0
        while r < len(chars):
            while r < len(chars) and chars[r] == chars[anchor]:
                r += 1
            # anchor : r - 1
            cur_len = r - 1 - anchor + 1
            if cur_len == 1:
                chars[w] = chars[anchor]
                w = w + 1
            else:
                chars[w] = chars[anchor]
                digits = len(str(cur_len))
                chars[w + 1 : w + digits + 1] = str(cur_len)
                w = w + digits + 1
            anchor = r
        return w
        
        
class Solution:
    def compress(self, chars: List[str]) -> int:
        res = []
        i = 0
        while i < len(chars):
            if i + 1 < len(chars) and chars[i] == chars[i + 1]:
                count = 0
                j = i
                while j < len(chars) and chars[i] == chars[j]:
                    count += 1
                    j += 1
                res.append(chars[i])
                count_s = str(count)
                for s in count_s:
                    res.append(s)
                i = j
            else:
                i += 1
        print(res)
        return len(res)
