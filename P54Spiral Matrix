simulation

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix or not matrix[0]:
            return []
        
        dirs = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        count = 1
        res = [matrix[0][0]]
        x = 0
        y = 0
        m = len(matrix)
        n = len(matrix[0])
        dirs_index = 0
        dx = 0
        dy = 1
        visited = set()
        visited.add((x, y))
        while count < m * n:
            while 0 <= x + dx < m and 0 <= y + dy < n and (x + dx, y + dy) not in visited:
                x += dx
                y += dy
                visited.add((x, y))
                count += 1
                res.append(matrix[x][y])
            dirs_index = (dirs_index + 1) % 4
            dx, dy = dirs[dirs_index]
        return res
            
            
            
            

# sol1 : simulation + hashset
# time O(mn)
# space O(mn)
# 思路:当new_x, new_y 越界或者已经被访问过，则换方向

class Solution(object):
    def spiralOrder(self, matrix):
       
        if not matrix or not matrix[0]:
            return []
        
        res = []
        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up
        m = len(matrix)
        n = len(matrix[0])
        visited = set()
        x = y = 0
        cur_i = 0
        
        for _ in range(m * n):
            res.append(matrix[x][y])
            visited.add((x, y))
            new_x = x + dirs[cur_i][0]
            new_y = y + dirs[cur_i][1]
            
            if 0 <= new_x < m and 0 <= new_y < n and (new_x, new_y) not in visited:
                x = new_x
                y = new_y
            else:
                cur_i = (cur_i + 1) % 4
                x += dirs[cur_i][0]
                y += dirs[cur_i][1]
        return res
            
           

# direction : 0, 1, 2, 3
# border: left, right, bottom, top

这是一个使用状态转移的例子。 
程序逻辑分为4个状态 
1. 0表示向右边读取 
2. 1表示向下读取 
3. 2表示向左读取 
4. 3表示向上读取 
仅仅用状态还不够，因为要从最外圈向内读取，所以还需要四个指针： 
1. up表示外圈的上行位置 
2. down表示外圈的下行位置 
3. left表示外圈的左列位置 
4. right表示外圈的右列位置

# time O(mn)
# space O(1)

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix or len(matrix) == 0 or len(matrix[0]) == 0:
            return []
        
        res = []
        d = 0 # 0 for right, 1 for down, 2 for left, 3 for up
        up = left = 0
        down,right = len(matrix) - 1,len(matrix[0]) - 1
        
        while up <= down and left <= right:
            
            if d == 0:
                for i in range(left, right + 1):
                    res.append(matrix[up][i])
                up += 1
            elif d == 1:
                for i in range(up, down + 1):
                    res.append(matrix[i][right])
                right -= 1 
            elif d== 2:
                for i in range(left, right + 1)[::-1]:
                    res.append(matrix[down][i])
                down -= 1 
            else:
                for i in range(up, down + 1)[::-1]:
                    res.append(matrix[i][left])
                left += 1 
                
            d = (d + 1) % 4
        return res
     

                    
                    
                
            
        
