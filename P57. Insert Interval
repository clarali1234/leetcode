class Solution(object):
    def insert(self, intervals, newInterval):
        if not intervals:
            return [newInterval]

        left, right = [], []
        for s, e in intervals:

            # [s, e] is in the left side of the newInternal
            if e < newInterval[0]:
                left.append([s, e])

            # [s, e] is in the right side of the newInternal
            elif s > newInterval[1]:
                right.append([s, e])
            
            # merge newInterval with [s, e]
            else:
                newInterval[0] = min(newInterval[0], s)
                newInterval[1] = max(newInterval[1], e)

        return left + [newInterval] + right





# sol
# 首先把interval插入到合适的位置，然后merge intervals (sort by start point)
# step1 insert interval
# step2 merge

# time O(n)
# space O(n)
class Solution(object):
    def insert(self, intervals, newInterval):
        
        if not newInterval:
            return intervals
        if not intervals:
            return [newInterval]
        
        
        # insert
        if intervals[-1][0] < newInterval[0]:
            intervals.append(newInterval)
            
        n = len(intervals)
        for i in range(n):
            if intervals[i][0] >= newInterval[0]:
                intervals.insert(i, newInterval)
                break
                
        # merge 
        res = []
        print(intervals)
        for s, e in intervals:
            if not res or res[-1][1] < s:
                res.append([s, e])
            else:
                res[-1][1] = max(res[-1][1], e)
        return res
        
 
 
 sol2 -- from oo ;)
 class Solution:
    def insert(self, intervals, newInterval):
        
        s, e = newInterval[0], newInterval[1]
        
        left, right = [], []
        
        for cur_interval in intervals:
            
            if cur_interval[1] < s:
                # current interval is on the left-hand side of newInterval
                left += [ cur_interval ]
                
            elif cur_interval[0] > e:
                # current interval is on the right-hand side of newInterval
                right += [ cur_interval ]
                
            else:
                # current interval has overlap with newInterval
                # merge and update boundary
                s = min(s, cur_interval[0])
                e = max(e, cur_interval[1])
                
        return left + [ [s, e] ] + right    
