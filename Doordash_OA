'''
given four arrays representing prices of four clothing items and a total budget, find number of combinations of possible purchases where you have to buy one of each clothing item.
e.g. input: [1,2,3] [2] [3] [2,3],  budget = 10
output: 5 combinations ([1,2,3,2] [1,2,3,3] [2,2,3,2] [2,2,3,3] [3,2,3,2])

'''

def getNumberOfOptions(priceOfJeans, priceOfShoes, priceOfSkirts, priceOfTops, budgeted):
    if budgeted >= max(priceOfJeans) + max(priceOfShoes) + max(priceOfSkirts) + max(priceOfTops):
        return len(priceOfJeans) * len(priceOfShoes) * len(priceOfSkirts) * len(priceOfTops)
    
    c1 = []
    c2 = []
    for i in priceOfJeans:
        for j in priceOfShoes:
            c1.append(i + j)
        
    for m in priceOfSkirts:
        for n in priceOfTops:
            c2.append(m + n)
                
    c1.sort()
    c2.sort()

    i = 0
    j = 0
    count = 0
    m = len(c1)
    n = len(c2)
    for i in range(m):
        j = 0
        while j < n and c1[i] + c2[j] <= budgeted:
             j += 1      
        if j < n and c1[i] + c2[j] > budgeted:
            count += n - j
            
    return m * n - count   
    


                        
test = Solution()
print(test.numCombination([[1,2,3], [2], [3], [2,3]], 10))
print(test.numCombination([[1,2], [2, 3]], 4))
      
1.	第一题国际象棋，求起终点的步数，bfs + memo
n x n chessboard, given the start and end position of two knights, find smallest number of steps to get from one place to the other or -1 if impossible


def isInside(x, y, N): 
    if (x >= 1 and x <= N and 
        y >= 1 and y <= N):  
        return True
    return False

def minStepToReachTarget(knightpos, targetpos, N): 
    dx = [2, 2, -2, -2, 1, 1, -1, -1] 
    dy = [1, -1, 1, -1, 2, -2, 2, -2] 
      
    queue = []
    queue.append([knightpos[0], knightpos[1], 0]) 
    visited = [[False for i in range(N + 1)]  
                      for j in range(N + 1)]  
    visited[knightpos[0]][knightpos[1]] = True
      
    while queue: 
        t = queue[0] 
        queue.pop(0)  
        if(t[0] == targetpos[0] and 
           t[1] == targetpos[1]): 
            return t[2]
        
        for i in range(8): 
            x = t[0] + dx[i] 
            y = t[1] + dy[i] 
            if (isInside(x, y, N) and not visited[x][y]): 
                visited[x][y] = True
                queue.append([x, y, t[2] + 1]) 
    return -1
  
N = 30
knightpos = [1, 1] 
targetpos = [30, 30] 
print(minStepToReachTarget(knightpos, 
                               targetpos, N))
