# dfs from 0 to N - 1
# if ignore the output path, time complexity is O(v) + O(e)
# else, time O(2^n) 

# time O(2^n)
# space O(2^n)

class Solution(object):
    def allPathsSourceTarget(self, graph):
        
        self.res = []
        self.dfs(graph, 0, [0])
        return self.res
    
    def dfs(self, graph, index, path):
        if index == len(graph) - 1:
            self.res.append(path)
            return 
        
        for nb in graph[index]:
            self.dfs(graph, nb, path + [nb])

# if has cycle
class Solution:
    def allPathsSourceTarget(self, graph):
        n = len(graph)
        self.res = []
        self.dfs(graph, 0, n - 1, [0])
        return self.res
    
    def dfs(self, graph, cur, target, path):
        if target == cur:
            self.res.append(path[:])
            return 
        
        if len(path) >= len(graph):
            return 
        
        for nb in graph[cur]:
            self.dfs(graph, nb, target, path + [nb])
            
            
test = Solution()
graph = [[2], [0, 3], [1], []]
print(test.allPathsSourceTarget(graph))
