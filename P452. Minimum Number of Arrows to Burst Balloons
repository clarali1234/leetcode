# greedy
# sort
一定存在一种最优（射出的箭数最小）的方法，使得每一支箭的射出位置都恰好对应着某一个气球的右边界

# time O(nlgn)
# space O(1)
算法：
如果气球的开始坐标大于 first_end：
则增加箭的数量。
将 first_end 设置为当前气球的 x_end。
返回 arrows。

class Solution(object):
    def findMinArrowShots(self, points):
        
        if not points:
            return 0
        
        points.sort(key = lambda x:x[1])
        
        cur_end = points[0][1]
        res = 1
        
        for s, e in points:
            if s > cur_end:
                res += 1
                cur_end = e
        return res
