1. 2-d grid, from s -> e, shortest path, X is obstacle
 import collections

class Solution(object):
    def shortestPath(self, grid, s, e):
        q = collections.deque([])
        q.append([s[0], s[1], 0])
        visited = set()
        visited.add((s[0],s[1]))
        while q:
            x, y, cur_step = q.popleft()
            if x == e[0] and y == e[1]:
                return cur_step
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and (new_x, new_y) not in visited and grid[new_x][new_y] != 'X':
                    q.append([new_x, new_y, cur_step + 1])
                    visited.add((new_x, new_y))
        return -1

    
test = Solution()
grid = [['X', '', '', 'X', '', 'e'], 
        ['', 'S', '', '', 'X', ''],
        ['', '', 'X', '', '', ''],
        ['','','','X', '', 'X']]
s = [1, 1]
e = [0, 5]
print(test.shortestPath(grid, s, e))


'''

coding是找top K frequent 元素 in a stream，相当于利口 伞似漆 的变体，实现俩APIs - addElement 和 printTopKFrequent

dic {ele : treeMapNode}
treeMap : sortedDic

sortedDic node: (key: count, []: numbers list) sort by key
dic: key: ele, value: count 


给定一个Stream,实现两个函数，添加一个数字，按照数字出现频率打印前K个数字，如果频率相同，按照添加顺序打印。
example: add(1), print(2): 1   add(2), print(2): 1,2  add(2),print(2): 2, 1 add(3), print(2):2,3


'''


from sortedcontainers import SortedDict
class Solution:
    def __init__(self):
        self.sorted_dict = SortedDict()
        self.dic = {}
        
    def add_ele(self, num): # logn * n
        if num in self.dic:
            prev_count = self.dic[num]
            cur_count = self.dic[num] - 1
            self.dic[num] = cur_count
            self.sorted_dict[prev_count].remove(num)
            if cur_count not in self.sorted_dict:
                self.sorted_dict[cur_count] = []
            self.sorted_dict[cur_count].append(num)
            
        else:
            self.dic[num] = -1
            #self.sorted_dict[1] = 2
            if -1 not in self.sorted_dict:
                self.sorted_dict[-1] = []
            self.sorted_dict[-1].append(num)
            #self.sorted_dict[1] = self.sorted_dict.get(1, []).append(num)
        
    def print_k(self, k): # O(k)
        print("print k ", k)
        n = len(self.dic)
        while k and n:
            for count, eles in self.sorted_dict.items():
                if eles:
                    for ele in eles[::-1]:
                        print(ele)
                        k -= 1
                        if k == 0:
                            break
                        n -= 1
                        if n == 0:
                            break

test = Solution()
test.add_ele(1)
test.print_k(2)

test.add_ele(2)
test.print_k(2)

test.add_ele(2)
test.print_k(2)
        
test.add_ele(3)
test.print_k(2)
            
'''

coding是给一个array，移除在当前元素之前，且比当前元素小的所有元素：
e.g. [25, 15, 40, 65, 50] -> [65, 50]; [1, 2, 3, 4, 5] -> [5]; [3, 2, 1] -> [3, 2, 1]

给定一个数组，删除所有比右边数字小的数字。比如： 30，20，10，50，25 -》 50， 25
我给的做法是从右往左遍历，如果左边数字比右边数字大，就写入res，并且更新flag. 写完后还跑了几个test case。然后问了时间和空间复杂度。

我从左往右遍历用Stack解的，解完跑了一堆test cases


'''



class Solution:
    def removeSmaller(self, nums):
        stack = []
        for ele in nums:
            if not stack or ele <= stack[-1]:
                stack.append(ele)
            else:
                while stack and stack[-1] < ele:
                    stack.pop()
                    
        return stack
    
test = Solution()
print(test.removeSmaller([25, 15, 40, 65, 50]))
                    
            
