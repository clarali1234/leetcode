1. 2-d grid, from s -> e, shortest path, X is obstacle
 import collections

class Solution(object):
    def shortestPath(self, grid, s, e):
        q = collections.deque([])
        q.append([s[0], s[1], 0])
        visited = set()
        visited.add((s[0],s[1]))
        while q:
            x, y, cur_step = q.popleft()
            if x == e[0] and y == e[1]:
                return cur_step
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and (new_x, new_y) not in visited and grid[new_x][new_y] != 'X':
                    q.append([new_x, new_y, cur_step + 1])
                    visited.add((new_x, new_y))
        return -1

    
test = Solution()
grid = [['X', '', '', 'X', '', 'e'], 
        ['', 'S', '', '', 'X', ''],
        ['', '', 'X', '', '', ''],
        ['','','','X', '', 'X']]
s = [1, 1]
e = [0, 5]
print(test.shortestPath(grid, s, e))
