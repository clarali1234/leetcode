# brute force
# use list to store node vals
# then do two pointers
# time O(n)
# space O(n)
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head:
            return True
        vals = []
        p = head
        while p:
            vals.append(p.val)
            p = p.next
        l = 0
        r = len(vals) - 1
        while l < r:
            if vals[l] != vals[r]:
                return False
        return True
        
        
# time O(n)
# space O(1)
# steps :
        # find middle
        # reverse rgith h
        # check palindrome
        

class Solution(object):
    def isPalindrome(self, head):
        
        if not head or not head.next:
            return True
        
        slow = head
        fast = head.next
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            
        
        h2 = slow.next
        slow.next = None
        h2 = self.reverse(h2)
        return self.palindrom(head, h2)
        
    
    def reverse(self, h):
        prev = None
        cur = h
        while cur:
            tmp = cur.next
            cur.next = prev
            prev = cur
            cur = tmp
        
        return prev
    
    def palindrom(self, l1, l2):
        while l1 and l2:
            if l1.val != l2.val:
                return False
            l1 = l1.next
            l2 = l2.next
        return True
            
    
        
