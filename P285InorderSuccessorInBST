#sol1: recursion
    time O(h), space O(h)
class Solution:
    def inorderSuccessor(self, root: 'TreeNode', p: 'TreeNode') -> 'TreeNode':
        if not root:
            return None
        if root.val <= p.val:
            return self.inorderSuccessor(root.right, p)
        left = self.inorderSuccessor(root.left, p)
        if left:
            return left
        return root

# sol2: non-recursion
    time O(h), space O(1)
class Solution:
    def inorderSuccessor(self, root: 'TreeNode', p: 'TreeNode') -> 'TreeNode':
        if not root or not p:
            return None
        
        cur = root
        res = None
        while cur:
            if p.val < cur.val:
                res = cur
                cur = cur.left
            else:
                cur = cur.right
        return res
            
        
