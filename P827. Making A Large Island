# flag the island with index len(self.area) - 2
# cal each area of nbs 
# sum nbs together
# time O(n^2), space O(n^2)

class Solution(object):
    def largestIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        self.area = []
        n = len(grid)
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    self.area.append(self.dfs(grid, i, j))

        # connect 0 with neighbor islands
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    nb_set = set() # the flag of the grid
                    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                        new_x = i + dx 
                        new_y = j + dy
                        if 0 <= new_x < n and 0 <= new_y < n and grid[new_x][new_y]:
                            nb_set.add(grid[new_x][new_y])
                    cur_area = 1
                    for flag in nb_set:
                        cur_area += self.area[flag - 2]
                    res = max(res, cur_area)
        return res if res else n ** 2
    
    def dfs(self, grid, x, y):
        grid[x][y] = len(self.area) + 2 # flag the island 
        size = 1
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == 1:
                size += self.dfs(grid, new_x, new_y)
        return size

class Solution(object):
    def largestIsland(self, grid):
        n = len(grid)
        
        # DFS 每个岛，统计各个岛的面积，记录到 area 列表中
        self.area = []
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    self.area.append(self.dfs(grid, i, j))

        ans = 0
        for i, row in enumerate(grid):
            for j, x in enumerate(row):
                if x: continue
                s = set()
                for x, y in (i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1):
                    if 0 <= x < n and 0 <= y < n and grid[x][y]:
                        s.add(grid[x][y])  # 记录上下左右格子所属岛屿编号
                ans = max(ans, sum(self.area[idx - 2] for idx in s) + 1)  # 累加面积
                
        # 如果最后 ans 仍然为 0，说明所有格子都是 1，返回 n^2
        return ans if ans else n * n

    def dfs(self, grid, i, j):
        n = len(grid)
        size = 1
        grid[i][j] = len(self.area) + 2  # 记录 (i,j) 属于哪个岛
        for x, y in (i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1):
            if 0 <= x < n and 0 <= y < n and grid[x][y] == 1:
                size += self.dfs(grid, x, y)
        return size



从每个0开始处理，先把0替换成1，然后再用 DFS 来找所有相连的1的个数，具体如何找就跟之前的岛屿的题目没啥区别了

class Solution(object):
    def largestIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        res = 0
        has_zero = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    has_zero += 1
                    self.cur_res = 1
                    self.visited = set()
                    self.visited.add((i, j))
                    self.dfs(grid, i, j)
                    res = max(self.cur_res, res)
        if not has_zero:
            return len(grid) * len(grid[0])
        return res

    def dfs(self, grid, x, y):
        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == 1 and (new_x, new_y) not in self.visited:
                self.cur_res += 1
                self.visited.add((new_x, new_y))
                self.dfs(grid, new_x, new_y)
