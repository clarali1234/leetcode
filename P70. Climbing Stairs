# brute force
# time O(2^n)
# space O(n)


# dfs time O(n), space O(n)
# 注意base case n <= 0, n = 1, n = 2

class Solution:
    def climbStairs(self, n: int) -> int:
        self.dic = {}
        return self.dfs(n)
    
    def dfs(self, n):
        if n in self.dic:
            return self.dic[n]
        
        if n <= 0:
            return 0
        
        if n == 1:
            return 1
        
        if n == 2:
            return 2
        
        res = self.dfs(n - 1) + self.dfs(n - 2)
        self.dic[n] = res
        return res


# DP
# dp[n] = dp[n-1] + dp[n-2]
可以逆向来分析问题，如果有n个台阶，那么走完n个台阶的方式有f(n)种。
而走完n个台阶有两种方法，先走完n-2个台阶，然后跨2个台阶；先走完n-1个台阶，然后跨1个台阶。所以f(n) = f(n-1) + f(n-2)。

# time O(n)
# spaec O(n)
class Solution(object):
    def climbStairs(self, n):
        
        if n == 1:
            return 1
        if n == 2:
            return 2
            
        dp = [0] * n
        dp[0] = 1 # first step
        dp[1] = 2 # second step
        
        for i in range(2, n):
            dp[i] = dp[i - 1] + dp[i - 2]
        return dp[-1]
            

# time O(n)
# space O(1)
is the same as fibo array
class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
    
        if n == 1:
            return 1
        if n == 2:
            return 2
            
        # dp[n] = dp[n - 1] + dp[n - 1]
        
        first = 1
        second = 2
        for i in range(2, n):
            tmp = first
            first = second
            second = second + tmp
        return second
