# dfs + recursion
# time  O(n * 2^n)
# space O(n * 2 ^ n)

# 【1，2， 3】
# 遍历每一个elem 选与不选它，两种结果，相当于二叉树

class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        self.dfs(nums, 0, [])
        return self.res
    
    
    def dfs(self, nums, index, cur_sub):
        if index == len(nums):
            self.res.append(cur_sub[:])
            return 
        
        cur_sub.append(nums[index])
        self.dfs(nums, index + 1, cur_sub)
        
        cur_sub.pop()
        self.dfs(nums, index + 1, cur_sub)
        
# combination 
# time O(n * 2^n)
# space o(n * 2^n)
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        result = []
        if not nums:
            return result
        
        self.dfs(nums, 0, [], result)
        return result
        
    def dfs(self, nums, start_index, cur_subset, result):
        result.append(list(cur_subset))
        
        for i in range(start_index, len(nums)):
            cur_subset.append(nums[i])
            self.dfs(nums, i+ 1, cur_subset, result)
            cur_subset.pop()
            
 # iterative 
 class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = [[]]
        for ele in nums:
            cur_size = len(res)
            for i in range(cur_size):
                cur_res = res[i].copy()
                cur_res.append(ele)
                res.append(cur_res)
        return res
                
