# time O(mnlgm) 
# space O(m)

class Solution(object):
    def maxSpending(self, values):
        m = len(values)
        n = len(values[0])

        heap = [[values[i].pop(), i] for i in range(m)]
        heapify(heap)

        res = 0
        for d in range(1, m * n + 1):
            v, i = heappop(heap)
            res += v * d
            if values[i]:
                heappush(heap, [values[i].pop(), i])
        return res
