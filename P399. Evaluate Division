# sol1 build graph + dfs q:query; e:equation
# time O(q(v + e)), worst case e is v^2
# space O(v + q)

class Solution(object):
    def calcEquation(self, equations, values, queries):
        
        # build graph
        # dfs query
        
        graph = collections.defaultdict(dict)
        for i, [n1, n2] in enumerate(equations):
            val = values[i]
            graph[n1][n2] = val
            graph[n2][n1] = 1.0 / val
            
        #print(graph) 
        res = []
        for n1, n2 in queries:
            if n1 not in graph or n2 not in graph:
                res.append(-1)
            else:
                visited = set([n1])
                v = self.dfs(graph, n1, n2, 1.0, visited)
                res.append(v)
        return res
    
    
    def dfs(self, graph, n1, n2, cur_res, visited):
        if n1 == n2:
            return cur_res
        
        res = -1
        for node in graph[n1]:
            if node not in visited:
                visited.add(node)
                candidate = self.dfs(graph, node, n2, cur_res * graph[n1][node], visited)
                if candidate > 0:
                    return candidate
        return res
            
 
 
 class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        # build graph with weight
        graph = collections.defaultdict(list)
        for i, [n1, n2] in enumerate(equations):
            graph[n1].append([n2, values[i]])
            graph[n2].append([n1, 1.0 / values[i]])
        self.res = []
        
        # calcu by dfs
        for x, y in queries:
            if x not in graph or y not in graph:
                self.res.append(-1.0)
            else:
                self.find = False
                self.visited = set()
                self.visited.add(x)
                self.dfs(graph, x, y, 1)
                if self.find == False:
                    self.res.append(-1.0)
        return self.res
    
    def dfs(self, graph, cur, target, cur_val):
        if cur == target:
            self.res.append(cur_val)
            self.find = True
            return 
        
        for nb, weight in graph[cur]:
            if nb not in self.visited:
                self.visited.add(nb)
                self.dfs(graph, nb, target, cur_val * weight)
            
        
