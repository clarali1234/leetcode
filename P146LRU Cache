# python dictionary + double linked list + dummy node + dummy tail
# dictionary, key : key, value : linked list node(k,v)
# 新节点从尾部加入
# 老节点从头部移走
# insert, delete for linked list is O(1), but access and search time is O(n)

# add and remove 都是针对linked list的操作
# 操作时先操作linked list node,在操作dict

class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.dic = {}
        self.capacity = capacity
        self.dummy_tail = ListNode(0, 0)
        self.dummy_head = ListNode(0, 0)
        self.dummy_tail.prev = self.dummy_head
        self.dummy_head.next = self.dummy_tail
        

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key not in self.dic:
            return -1

        node = self.dic[key]
        self.remove(node)
        self.add(node)
        return node.val
        

    def put(self, key, value):
        if key in self.dic:
            node = self.dic[key]
            self.remove(node)
            self.add(node)
            node.val = value
        else:
            if self.capacity == len(self.dic.keys()):
                head = self.dummy_head.next
                self.remove(head)
                del self.dic[head.key]
            node = ListNode(key,value)
            self.add(node)
            self.dic[key] = node

    def remove(self, node):
        prev = node.prev
        nxt = node.next
        prev.next = nxt
        nxt.prev = prev

    def add(self, node):
        # add from the tail
        tail = self.dummy_tail.prev
        tail.next = node
        node.prev = tail
        node.next = self.dummy_tail
        self.dummy_tail.prev = node


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
