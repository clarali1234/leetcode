# hashtable + binary search
# space O(n)
# set time O(1)
# get time O(lgn)

# node:
hash tale: key = key, value = [(t, val), ....]
首先判断key in dic, then bisec for t

# k, v, t

# get : 
# input k, t0
# output val (with t <= t0) return last t

# dic, key: key, value: (val, t)

class TimeMap(object):

    def __init__(self):
        self.dic = collections.defaultdict(list)

    def set(self, key, value, timestamp):
        
        self.dic[key].append([value, timestamp])
        
    def get(self, key, timestamp):
        
        l = 0
        r = len(self.dic[key]) - 1
        while l + 1 < r:
            m = (l + r) // 2
            if self.dic[key][m][1] <= timestamp:
                l = m 
            else:
                r = m - 1

        if 0 <= r < len(self.dic[key]) and self.dic[key][r][1] <= timestamp:
            return self.dic[key][r][0]
        if 0 <= l < len(self.dic[key]) and self.dic[key][l][1] <= timestamp:
            return self.dic[key][l][0]
        return ''
        
