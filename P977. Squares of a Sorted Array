# time O(n)
# space O(n)

class Solution(object):
    def sortedSquares(self, A):
        """
        :type A: List[int]
        :rtype: List[int]
        """
        # find fist val >= 2, i
        # j = i - 1, two pointer
        
        for i in range(len(A)):
            if A[i] < 0:
                i += 1
            else:
                break
        
        j = i - 1
        res = []
        while j >= 0 and i < len(A):
            if abs(A[j]) < A[i]:
                res.append(A[j] ** 2)
                j -= 1
            else:
                res.append(A[i] ** 2)
                i += 1
        
        if j >= 0:
            while j >= 0:
                res.append(A[j] ** 2)
                j -= 1
        elif i < len(A):
            while i < len(A):
                res.append(A[i] ** 2)
                i += 1
        return res
        
        
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        # i, j
        # j index of first ele >= 0
        if not nums:
            return []
        
        res = []
        i = 0
        j = 0
        while j + 1 < len(nums) and nums[j] < 0:
            j += 1
            
        # j + 1 == len(nums) or nums[j] >= 0
        if j - 1 >= 0:
            i = j - 1
        else:
            return [x ** 2 for x in nums]
            
        
        while i >= 0 and j < len(nums):
            if abs(nums[i]) <= abs(nums[j]):
                res.append(nums[i] ** 2)
                i -= 1
            else:
                res.append(nums[j] ** 2)
                j += 1
                
        while i >= 0:
            res.append(nums[i] ** 2)
            i -= 1
            
        while j < len(nums):
            res.append(nums[j] ** 2)
            j += 1
        return res
