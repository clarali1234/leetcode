#two pointers, iterate each j pointer, add to sum, while sum >= s, 
# compare min_len with j â€“ I + 1,  contract pointer I and update sum
# two pointers
# time O(n)
# space O(1)

class Solution(object):
    def minSubArrayLen(self, target, nums):
        l = 0
        r = 0
        sum_w = 0
        res = sys.maxsize
        for r in range(0, len(nums)):
            sum_w += nums[r]

            while sum_w >= target:
                res = min(res, r - l + 1)
                sum_w -= nums[l]
                l += 1

        if res != sys.maxsize:
            return res
        return 0


class Solution(object):
    def minSubArrayLen(self, s, nums):
        
        res = sys.maxsize
        j = 0
        cur_sum = 0
        for i in range(len(nums)):
            while j < len(nums) and cur_sum + nums[j] < s:
                cur_sum += nums[j]
                j += 1
            
            if j < len(nums) and cur_sum + nums[j] >= s:
                res = min(res, j - i + 1 )
            
            cur_sum -= nums[i]
        if res == sys.maxsize:
            return 0
        return res
            
            
            

