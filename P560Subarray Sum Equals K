sol1: brute-force 遍历i,j,算出sum.
time O(n^3), space O(1)

# two pointers
# time o(n^2)
# space O(1) 
class Solution(object):
    def subarraySum(self, nums, k):
        
        
        res = 0
        for i in range(len(nums)):
            cur_sum = 0
            for j in range(i, len(nums)):
                cur_sum += nums[j]
                if cur_sum == k:
                    res += 1
        return res

# prefix_sum + hash
# time O(n), space O(n)
# hash , key: prefix sum, value :count, prefix_sum = current_sum - k
# whenever sums has increased by a value of k, we've found a subarray of sums=k.
(https://leetcode.com/problems/subarray-sum-equals-k/solutions/341399/python-clear-explanation-with-code-and-example/?envType=company&envId=facebook&favoriteSlug=facebook-three-months)
class Solution(object):
    def subarraySum(self, nums, k):
        
        dic = {0 : 1} # key: sum
        cur_sum = 0
        
        res = 0
        for num in nums:
            cur_sum += num
            res += dic.get(cur_sum - k, 0)
            dic[cur_sum] = dic.get(cur_sum, 0) + 1
        return res
            
            
            
        
        
        
  # follow-up if all non-negative number
  # two pointers 
  # time O(n), space O(1)
  
  # 可以用两个index，因为array里面的数都是正的，当current sum小于target的时候，第二个index右移，
  # 如果current sum > target的时候，第一个index右移。
  

 def subarSum(nums, k):
    
    left = 0
    right = 0
    sum_ = 0
    count = 0
    
    for left in range(len(nums)):
        while sum_ < k and right < len(nums):
            sum_ += nums[right]
            right += 1
        
        # sum_ >= k:
        if sum_ == k:
            count += 1
            print(left, right)
        sum_ -= nums[left]
            
    return count

# follow up sum >= k and no negative integer
# time O(n)
def subarSum(nums, k):
    
    left = 0
    right = 0
    sum_ = 0
    count = 0
    
    for left in range(len(nums)):
       
        while sum_ < k and right < len(nums):
            sum_ += nums[right]
            right += 1
        
        # sum_ >= k:
        if sum_ == k:
            count += 1
            print(left, right)
    
        sum_ -= nums[left]
            
    return count

nums = [1,1,1] 
k = 2
print(subarSum(nums, k))
            


  # prefix sum + hash 
  
  class Solution(object):
    def subarraySum(self, nums, k):
        if not nums:
            return 0
        
        res = 0 
        # key = prefix_sum, value = count
        # sub[j] - sub[i] >= k, sub[j] - k >= sub[i]
        cur_sum = 0
        dic = {0:1}
        for num in nums:
            cur_sum = cur_sum + num
            for key in dic.keys():
                if key <= cur_sum - k:
                    res += dic.get(key, 0)
            dic[cur_sum] = dic.get(cur_sum, 0) + 1
            
        return res
    
 sol2: # prefix sum 
    # prefix_sum[i] = sum(nums[0:i-1])
    # time O(n^2), space 0(n)
    
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        if not nums:
            return 0
        
        count = 0
        prefix_sum = [0] * (len(nums) + 1)

        for i in range(1, len(prefix_sum)):
            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
        #print(prefix_sum)
        
        for left in range(len(prefix_sum)):
            for right in range(left + 1, len(prefix_sum)):
                if prefix_sum[right] - prefix_sum[left] == k:
                    #print((left, right))
                    count += 1
        return count
    
