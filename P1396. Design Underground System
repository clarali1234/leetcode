# two hashtbale
# time O(1)
# space O(n)


class UndergroundSystem:

    def __init__(self):
        self.passengers = {} # key: id, val: (start_station, start_time)
        self.stations = collections.defaultdict(list) # key: (start, end station), val: (time, count)
        
    def checkIn(self, id: int, stationName: str, t: int) -> None:
        self.passengers[id] = (stationName,t)
        

    def checkOut(self, id: int, stationName: str, t: int) -> None:
        start_station, start_time = self.passengers[id]
        prev_time, prev_c = self.stations.get((start_station, stationName), (0, 0))
        self.stations[(start_station, stationName)] = (prev_time + t - start_time, prev_c + 1)
        

    def getAverageTime(self, startStation: str, endStation: str) -> float:
        total_time, total_c = self.stations.get((startStation, endStation))
        return total_time / total_c * 1.0
        
        

