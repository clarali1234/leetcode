
# brute force 
# O(n)
# liear time to find missing(index) < k <= missing(index + 1)
class Solution:
    def missingElement(self, nums: List[int], k: int) -> int:
        if nums[-1] - nums[0] + 1 - len(nums) < k:
            return nums[-1] + k - (nums[-1] - nums[0] + 1 - len(nums))
        
        # find missing(index) < k < missing(index + 1)
        missing = [0 for _ in range(len(nums))]
        for i in range(len(nums)):
            if i:
                missing[i] = nums[i] - nums[0] + 1 - (i - 0 + 1)
        
        for i in range(len(nums)):
            if missing[i] < k and missing[i + 1] >= k:
                return nums[i] + (k - missing[i])
            


# binary search
time O(lgn)
space O(1)

node:
binary search to find index, missing(index) < k <= missing(index + 1), 
so the result is nums[index] + k


class Solution(object):
    def missingElement(self, nums, k):
        
        missing_c = (nums[-1] - nums[0] + 1) - (len(nums))
        if missing_c < k:
            return nums[-1] + k - missing_c
        
        l = 0
        r = len(nums) - 1
        
        while l + 1 < r:
            m = (l + r) // 2
            missing_l_m = (nums[m] - nums[l] + 1) - (m - l + 1)
            if missing_l_m < k:
                l = m
                k -= missing_l_m
            else:
                r = m
        return nums[l] + k
