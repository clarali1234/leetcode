# 判断是否为tree
# 1. n - 1 edges 2. 无环 (traverse all node in one dfs)

* 1. Tree has n-1 edges
* 2. Disjoint Set can detect if there is cycle in graph
* 3. Graph with less than n-1 edges is definitely not connected
* 4. Graph with more than n-1 edges definitely has cycle

class Solution(object):
    def validTree(self, n, edges):
        
        if n != len(edges) + 1:
            return False
        
        graph = collections.defaultdict(set)
        for i, j in edges:
            graph[i].add(j)
            graph[j].add(i)
            
        self.visited = set()
        self.visited.add(0)
        self.dfs(graph, 0)
        return len(self.visited) == n
    
    def dfs(self, graph, x):
        for i in graph[x]:
            if i not in self.visited:
                self.visited.add(i)
                self.dfs(graph, i)
                
                
# bfs
class Solution:
    def validTree(self, n, edges):
        if len(edges) != n - 1:
            return False
        neighbors = {i: set() for i in range(n)}
        
        for i, j in edges:
            neighbors[i].add(j)
            neighbors[j].add(i)
            
        visited = set()
        queue = collections.deque([0])
        while queue:
            node = queue.popleft()
            if node in visited:
                return False
            for neighbor in neighbors[node]:
                queue.append(neighbor)
                neighbors[neighbor].remove(node)
            visited.add(node)
        return len(visited) == n
        
        
        
        
  # union found method 
  # tree的条件，n - 1条边, 只有一个联通块（无环）
  
  class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        if n - 1 != len(edges):
            return False
        
        self.father = {}
        for i in range(n):
            self.father[i] = i
        self.size = n
        
        for a, b in edges:
            self.union(a, b)
            
        return self.size == 1
    
    def union(self, a, b):
        root_a = self.find(a)
        root_b = self.find(b)
        
        if root_a != root_b:
            self.father[root_a] = root_b
            self.size -= 1 
        
    def find(self, node):
        path = []
        while self.father[node] != node:
            path.append(node)
            node = self.father[node]
            
        for n in path:
            self.father[n] = node
        return node
        
