# time O(n)
# space O(n)
class Solution(object):
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        count = collections.Counter(s)
        for index, ele in enumerate(s):
            if count[ele] == 1:
                return index
        return -1
        
# time O(n)
# space O(1)
class Solution:
    def firstUniqChar(self, s: str) -> int:
        c = [0 for _ in range(26)]
        for char in s:
            c[ord(char) - ord('a')] += 1
        
        for i, char in enumerate(s):
            if c[ord(char) - ord('a')] == 1:
                return i
        return -1
