class Solution(object):
    def generateParenthesis(self, n):
        self.res = []
        self.dfs('', 0, 0, n)
        return self.res


    def dfs(self, path, l_c, r_c, n):
        if l_c == r_c == n:
            self.res.append(path)
            return

        if l_c < n:
            self.dfs(path + '(', l_c + 1, r_c, n)
        if l_c > r_c:
            self.dfs(path + ')', l_c, r_c + 1, n)
        


# time O(2^2n)
# space O(2^2n)

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        self.res = []
        self.dfs(n, n, '')
        return self.res
    
    def dfs(self, left, right, cur_path):
        if left == 0 and right == 0:
            if self.isvalid(cur_path):
                self.res.append(cur_path)
            return 
        
        if left > 0:
            self.dfs(left - 1, right, cur_path + '(')
        if right > 0:
            self.dfs(left, right - 1, cur_path + ')')
        
    
    def isvalid(self, s):
        left = 0
        right = 0
        for char in s:
            if char == '(':
                left += 1
            else:
                if left:
                    left -= 1
                else:
                    right += 1
                    
        return left == 0 and right == 0
                
                
sol2:  reduce the time complexity,  let's only add them when we know it will remain a valid sequence.       
        

class Solution(object):
    def generateParenthesis(self, n):
        
        self.res = []
        self.dfs(n, n, '')
        return self.res
        
    def dfs(self, left, right, cur_path):
        if left == 0 and right == 0:
            self.res.append(cur_path)
            return 
        
        if left > 0:
            self.dfs(left - 1, right, cur_path + '(')
        
        if right > left:
            self.dfs(left, right - 1, cur_path + ')')
            
        


# dfs(backtracking)
# worst case time O(2^2n) actually, O(2^2n/sqrt(n))
# space  case time O(2^2n) and O(n) to store the result

# we can reduce the time complexity by adding the brackets when we know they are valid
# add opening brackets when we still have one of n left to place
# add closing brackets when it would not exceed the number of the opening brackets
  
class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        self.res = []
        self.dfs(0, 0, '', n)
        return self.res
    
    def dfs(self, left, right, cur_path, n):
        if len(cur_path) == 2 * n:
            self.res.append(cur_path)
            return 
        
        if left < n:
            self.dfs(left + 1, right, cur_path + '(', n)
        if right < left:
            self.dfs(left, right + 1, cur_path + ')', n)
