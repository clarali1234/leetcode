# toy database 

# build a new databse
# records are maps , key: string, value: integers
# records are in an array, no order

# ['a' : 1, 'b' : 2]
'''
# minByColumn
Write a function minByColumn that takes a database table (as above), along with a column, and returns the row that contains the minimum value for the given column.

If a row doesn't have any value for the column, it should behave as though the value for that column was zero.


思路: sort + lambda function

可以允许用任何方法写，这两个function我都用了comparator的写法，然后collections sort，取第一个。这样的话，minByOrder function就只需要稍微修改一下就可以了。最后面试大叔告诉我其实collections可以直接用min的function。。。

# minByOrder
Write a function minByOrder that takes a database table and a list of columns, and returns the row with the minimum column values using the tie-breaking logic above.
If only one column is provided, then the behavior of minByOrder is identical to passing that column to minByColumn:

comparator class然后还是一样pass 到 sort function 里

'''
# step1 
def min_by_key(table, column):
    if not table or not column:
        return {}
    
    table.sort(key = lambda x : x[column] if column in x else 0)
    return table[0]

# step2
def min_by_keys(table, cols):
    if not table or not cols or (len(cols) == 1 and not cols[0]):
        return {}
    
    if len(cols) == 1:
        return min_by_key(table, cols[0])
    table.sort(key = lambda x : [x[c] if c in x else 0 for c in cols])
    return table[0]
    
# test min_by_key
assert(min_by_key([{"a": 1}, {"a": 2}, {"a" : 3}], "a") == {"a": 1})
assert(min_by_key([{"a" : 1, "b" : 2}, {"a" : 3}], "a") == {'a' : 1, 'b' : 2})
assert(min_by_key([{"a" : 1, "b" : 2}, {"a" : 3}], "b") == {'a' : 3})
assert(min_by_key([{"a" : 1, "b" : -2}, {"a" : 3}], "b") == {"a" : 1, "b" : -2})
assert(min_by_key([], "a") == {})
assert(min_by_key([{"a": 1}, {"a": 2}, {"a" : 3}], "") == {})
            
# test min_by_keys
assert(min_by_keys([], [])== {})
assert(min_by_keys([{'a' : 1, 'b' : 1}, {'a' : 1, 'b' : 2}], ['a', 'b']) == {'a' : 1, 'b' : 1})
assert(min_by_keys([{'a' : 1, 'b' : -1}, {'a' : 1}], ['a', 'b']) == {'a' : 1, 'b' : -1})
assert(min_by_keys([{'a' : 1, 'b' : -1}, {'a' : 1}], ['a', 'b']) == {'a' : 1, 'b' : -1})
assert(min_by_keys([{'a' : 1, 'b' : 2, 'c' : -5}, {'a' : 1}], ['a', 'c']) == {'a' : 1, 'b' : 2, 'c' : -5})



# old version
import sys
class Solution(object):
    def sort_by_column(self, table, column):
        if not table or not column:
            return {}
        
        res = {}
        min_val = sys.maxsize
        for record in table:
            cur_v = 0
            if column in record:   
                cur_v =record[column]
            if cur_v < min_val:
                min_val = cur_v
                res = record
        return res
    
    def test_sort_by_column(self):
        assert self.sort_by_column([{'a' : 1}, {'a' : 2}]) == {'a' : 1}
        assert self.sort_by_column([{'a' : 1}, {'b' : 2}]) == {'b' : 2}

test = Solution()
test.test_sort_by_column
                
# toy database 
# old version

# step 1:
def min_by_key(column, table):
    if not table or not column:
        return {}
    table.sort(key = lambda x : x[column] if column in x else 0)
    return table[0]

assert min_by_key("a", [{"a": 1, "b": 2}, {"a": 2}]) == {"a": 1, "b": 2}
assert min_by_key("a", [{"a": 2}, {"a": 1, "b": 2}]) == {"a": 1, "b": 2}
assert min_by_key("b", [{"a": 1, "b": 2}, {"a": 2}]) == {"a": 2}
assert min_by_key("a", [{}]) == {}
assert min_by_key("b", [{"a": -1}, {"b": -1}]) == {"b": -1}

# step 2
def first_by_key(key, sort_dir, table):
    if not table or not key:
        return {}
    if sort_dir == 'asc': # return min
        table.sort(key = lambda x : x[key] if key in x else 0)
    elif sort_dir == 'desc':
        table.sort(key = lambda x : x[key] if key in x else 0, reverse = True)
    return table[0]

assert first_by_key("a", "asc", [{"a": 1}]) == {"a": 1}
assert first_by_key("a", "asc", [{"b": 1}, {"b": -2}, {"a": 10}]) in [{"b": 1}, {"b": -2}]
assert first_by_key("a", "desc", [{"b": 1}, {"b": -2}, {"a": 10}]) == {"a": 10}
assert first_by_key("b", "asc", [{"b": 1}, {"b": -2}, {"a": 10}]) == {"b": -2}
assert first_by_key("b", "desc", [{"b": 1}, {"b": -2}, {"a": 10}]) == {"b": 1}
assert first_by_key("a", "desc", [{}, {"a": 10, "b": -10}, {}, {"a": 3, "c": 3}]) == {"a": 10, "b": -10}

# step3
'''
you should write a class whose constructor
     * accepts two parameters: a string key and a string direction. 
    
    The class should
     * implement a method compare that takes as its parameters two records. This
     * method should return -1 if the first record comes before the second record
     * (according to key and direction), zero if neither record comes before the
     * other, or 1 if the first record comes after the second.

'''
class Comparator(object):
    def __init__(self, key, sort_dir):
        self.key = key
        self.dir = sort_dir
        
    def compare(self, table1, table2):
        v1 = v2 = 0
        if self.key in table1:
            v1 = table1[self.key]
        if self.key in table2:
            v2 = table2[self.key]
            
        if self.dir == 'asc':
            if v1 < v2:
                return -1
            if v1 == v2:
                return 0
            if v1 > v2:
                return 1
        elif self.dir == 'desc':
            if v1 < v2:
                return 1
            if v1 == v2:
                return 0
            if v1 > v2:
                return -1
            
cmp = Comparator('a', 'asc')
assert cmp.compare({"a": 1}, {"a": 2}) == -1
assert cmp.compare({"a": 2}, {"a": 1}) == 1
assert cmp.compare({"a": 1}, {"a": 1}) == 0  

cmp = Comparator('a', 'desc')
assert cmp.compare({"a": 1}, {"a": 2}) == 1
assert cmp.compare({"a": 2}, {"a": 1}) == -1
assert cmp.compare({"a": 1}, {"a": 1}) == 0

# step4

def first_by_sort_order(keys, table):
    table.sort(key = lambda x : Comparator(k, v).compare() for k, v in keys)
    return table[0]
               
     
print(first_by_sort_order([('a', 'asc'), ('b', 'desc')], [{'a': 1, 'b': 2}, {'a': 1, 'b': 1}]))
#assert first_by_sort_order([('a', 'asc'), ('b', 'desc')],[{'a': 1, 'b': 2}, {'a': 1, 'b': 1}]) == {'a': 1, 'b': 2}


            
            
            
                            
                

