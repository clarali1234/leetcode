# toy database 

# build a new databse
# records are maps , key: string, value: integers
# records are in an array, no order

# ['a' : 1, 'b' : 2]
'''
# minByColumn
Write a function minByColumn that takes a database table (as above), along with a column, and returns the row that contains the minimum value for the given column.

If a row doesn't have any value for the column, it should behave as though the value for that column was zero.


思路: sort + lambda function

可以允许用任何方法写，这两个function我都用了comparator的写法，然后collections sort，取第一个。这样的话，minByOrder function就只需要稍微修改一下就可以了。最后面试大叔告诉我其实collections可以直接用min的function。。。

# minByOrder
Write a function minByOrder that takes a database table and a list of columns, and returns the row with the minimum column values using the tie-breaking logic above.
If only one column is provided, then the behavior of minByOrder is identical to passing that column to minByColumn:

comparator class然后还是一样pass 到 sort function 里

'''
# step1 
def min_by_key(table, column):
    if not table or not column:
        return {}
    
    table.sort(key = lambda x : x[column] if column in x else 0)
    return table[0]

# step2
def min_by_keys(table, cols):
    if not table or not cols or (len(cols) == 1 and not cols[0]):
        return {}
    
    if len(cols) == 1:
        return min_by_key(table, cols[0])
    table.sort(key = lambda x : [x[c] if c in x else 0 for c in cols])
    return table[0]
    
# test min_by_key
assert(min_by_key([{"a": 1}, {"a": 2}, {"a" : 3}], "a") == {"a": 1})
assert(min_by_key([{"a" : 1, "b" : 2}, {"a" : 3}], "a") == {'a' : 1, 'b' : 2})
assert(min_by_key([{"a" : 1, "b" : 2}, {"a" : 3}], "b") == {'a' : 3})
assert(min_by_key([{"a" : 1, "b" : -2}, {"a" : 3}], "b") == {"a" : 1, "b" : -2})
assert(min_by_key([], "a") == {})
assert(min_by_key([{"a": 1}, {"a": 2}, {"a" : 3}], "") == {})
            
# test min_by_keys
assert(min_by_keys([], [])== {})
assert(min_by_keys([{'a' : 1, 'b' : 1}, {'a' : 1, 'b' : 2}], ['a', 'b']) == {'a' : 1, 'b' : 1})
assert(min_by_keys([{'a' : 1, 'b' : -1}, {'a' : 1}], ['a', 'b']) == {'a' : 1, 'b' : -1})
assert(min_by_keys([{'a' : 1, 'b' : -1}, {'a' : 1}], ['a', 'b']) == {'a' : 1, 'b' : -1})
assert(min_by_keys([{'a' : 1, 'b' : 2, 'c' : -5}, {'a' : 1}], ['a', 'c']) == {'a' : 1, 'b' : 2, 'c' : -5})



# old version


