# dfs 
# time O(4^n))
# space O(n)
use dfs and backtracking here to explor all possible combinations.

class Solution(object):
    def addOperators(self, num, target):
        if not num:
            return []
        
        self.res = []
        self.dfs(num, target, 0, 0, '', 0)
        return self.res
    
    def dfs(self, num, target, index, cur_sum, cur_path, last_ele):
        if index == len(num):
            if target == cur_sum:
                self.res.append(cur_path)
            return 
        
        for i in range(index, len(num)):
            # take care of '00'
            cur_num = num[index : i + 1]
            if index == 0:
                self.dfs(num, target, i + 1, int(cur_num), cur_num, int(cur_num))
            else:
                self.dfs(num, target, i + 1, cur_sum + int(cur_num), cur_path + '+' + cur_num, int(cur_num))
                self.dfs(num, target, i + 1, cur_sum - int(cur_num), cur_path + '-' + cur_num, -int(cur_num))
                self.dfs(num, target, i + 1, cur_sum - last_ele + last_ele * int(cur_num), cur_path + '*' + cur_num, last_ele * int(cur_num))
                
            # 00
            if cur_num == '0':
                break
                
                
        
        
