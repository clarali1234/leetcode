# brute-force method time o(nlgn) space O(n), 思路：hash key: elemts, value: frequency

class Solution(object):
    def topKFrequent(self, words, k):
        
        c = collections.Counter(words)
        items = c.items()
        items.sort(key = lambda x : (-x[1], x[0]))
        res = [x[0] for x in items]
        return res[:k]
        
        
# heap size(n)
# time O(n + klgn)
# space O(n)

from heapq import * 
class Solution(object):
    def topKFrequent(self, words, k):
        c = collections.Counter(words)
        heap = []
        for w, count in c.items():
            heap.append((-count, w))
        
        heapify(heap)
        res = []
        #print(heap)
        
        while k:
            c, w = heappop(heap)
            res.append(w)
            k -= 1
        return res
        
        

Follow-up
# Pair(w, c) 自定义比较函数 __lt__
# 动态添加 min heap with size K
# sort by （count, -char)

class Pair(object):
    def __init__(self, w, c):
        self.word = w
        self.count = c

    def __lt__(self, w2):
        if self.count == w2.count:
            return self.word > w2.word
        return self.count < w2.count


class Solution(object):
    def topKFrequent(self, words, k):
        # min heap size k, (fre, -word)
        heap = []
        dic = collections.Counter(words)
        for word, c in dic.items():
            if len(heap) == k:
                heappushpop(heap, Pair(word, c))
            else:
                heappush(heap, Pair(word, c))

        res = []
        for _ in range(k):
            res.append(heappop(heap).word)
        return res[::-1]
        
                             
