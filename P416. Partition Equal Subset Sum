# time O(n * sum)
  # space O(n)
  class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        self.cache = {}
        if sum(nums) % 2:
            return False
        
        return self.dfs(nums, 0, sum(nums) / 2)
    
    def dfs(self, nums, start, target):
        if (start, target) in self.cache:
            return self.cache[(start, target)]
        
        if target < 0:
            return 
        
        if target == 0:
            return True
        
        for i in range(start, len(nums)):
            if self.dfs(nums, i + 1, target - nums[i]):
                self.cache[(start, target)] = True
                return True
            
        self.cache[(start, target)] = False
        return False
 
# 优化空间
# With space optimization:
# Time: O(n * sum)  n: number of elements,
# Space: O(sum) 
上面这句话可以解读为：对于前i个数字(可以为0），能凑成总和为j的，有两种情况：
1.如果dp数组中已经记录了可以凑成j，那肯定没问题；
2.如果当前的大小j，减去当前这个数字，还能够凑成的话，那么加上当前数字，肯定也可以凑成，所以这时候也能凑成j。

dp[i][j] = dp[i - 1][j] or dp[i - 1][j - num]
from left to right means dp[i][j] = dp[i][j-nums[i-1]])
form right to left means dp[i][j] = dp[i-1][j-nums[i-1]]

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        s = sum(nums)
        if s % 2:
            return False
        
        target = s // 2
        dp = [False] * (target + 1)
        
        dp[0] = True
    
        for num in nums:
            for j in range(target, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]
        print(dp)
        
        return dp[-1]
      
      
# 0-1背包
# time O(n * m) n: number of elements, m: total_sum
# space o(n * m) n: number of elements, m: total_sum

# dp[i][j] if sum j can be abtained by first i items in nums
# 转移方程
dp[i][j] = dp[i - 1][j](不包含i) or dp[i - 1][j - num](包含i)
# 初始化
# sum 0 可以由任何数量的数字组成
# dp[i][0] =  True

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        if not nums:
            return True
        
        sum_total  = sum(nums)
        if sum_total % 2:
            return False
        
        sum_total = sum_total // 2
        
        n = len(nums)
        
        #dp[i][j] if sum j can be abtained by first i items in nums
        dp = [[False] * (sum_total + 1) for _ in range(n + 1)]
        
        # initialize
        # sum 0 可以由任何数量的数字组成
        # dp[i][0] =  True
        for i in range(n + 1):
            dp[i][0] = True
            
        for i in range(1, n + 1):
            for j in range(sum_total + 1):
                num = nums[i - 1]
                if j >= num:
                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - num]
                else:
                    dp[i][j] = dp[i - 1][j] 
          
        return dp[-1][-1]
        
        
 
  
