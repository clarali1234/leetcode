BFS. 首先找出在边界的O, 将它们加到队列中, 然后对它们进行BFS搜索, 将它和它相邻的O转化为D. 
棋盘里剩下的O则是被X包围住的O, 遍历棋盘, 将O改为X, 将D还原为O.

Time: O(mn)
Space: O(mn)

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        q = collections.deque([])

        for i in range(len(board)):
            if board[i][0] == 'O':
                q.append((i, 0))
                board[i][0] = 'E'
            if board[i][len(board[0])-1] == 'O':
                q.append((i, len(board[0])- 1))
                board[i][len(board[0]) - 1] = 'E'

        for j in range(len(board[0])):
            if board[0][j] == 'O':
                q.append((0, j))
                board[0][j] = 'E'
            if board[len(board) - 1][j] == 'O':
                q.append((len(board) - 1, j))
                board[len(board) - 1][j] = 'E'
            
        while q:
            x, y = q.popleft()
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(board) and 0 <= new_y < len(board[0]) and board[new_x][new_y] == 'O':
                    q.append((new_x, new_y))
                    board[new_x][new_y] = 'E'

        for x in range(len(board)):
            for y in range(len(board[0])):
                if board[x][y] == 'O':
                    board[x][y] = 'X'
                if board[x][y] == 'E':
                    board[x][y] = 'O'
        
        return board
        
