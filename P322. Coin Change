class Solution(object):
    def coinChange(self, coins, amount):
        
        dp = [sys.maxsize for _ in range(amount + 1)]
        dp[0] = 0
        for i in range(len(dp)):
            for coin in coins:
                if i >= coin:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
                    
        if dp[-1] == sys.maxsize:
            return -1
        return dp[-1]


class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if not amount:
            return 0
        
        self.memo = {}
        res = self.dfs(coins, amount)
        if res == sys.maxsize:
            return -1
        return res
        
    
    def dfs(self, coins, cur):
        if cur in self.memo:
            return self.memo[cur]
        
        if cur == 0:
            self.memo[0] = 0
            return 0
        
        if cur < 0:
            return sys.maxsize
        
        
        res = sys.maxsize
        for coin in coins:
            if cur >= coin:
                res = min(self.dfs(coins, cur - coin) + 1, res)
                
        self.memo[cur] = res
        return res
        
                
                
                




需要构建一个长度是amount + 1的dp数组，其含义是能够成面额从0到amount + 1需要使用的最少硬币数量
for each coin, for i in range(amount + 1)
dp[i] = min(dp[i], dp[i - coin] + 1), 假设dp[i]表示凑够i元所需要的最少硬币数

# ans = DP[amount]
# time O(n*amount)
# space O(amount)

class Solution(object):
    def coinChange(self, coins, amount):
        
        dp = [sys.maxsize for _ in range(amount + 1)]
        dp[0] = 0
        for i in range(1, len(dp)):
            for coin in coins:
                if i >= coin:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
        if dp[-1] == sys.maxsize:
            return -1
        return dp[-1]
        
        
