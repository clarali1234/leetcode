# idea: binary search 
# for each possible speed can finish 1, can't 0   
# 0 0 0 0  1 1 1 1 
# can, r = m, else: l = m + 1
# l = 1, r = max(piles)

# time O(nlogmax(piles)), space O(1)

class Solution(object):
    def minEatingSpeed(self, piles, H):
       
        l = 1
        r = max(piles)
        
        while l + 1 < r:
            m = (l + r) // 2
            if self.can_eat(piles, m, H):
                r = m
            else:
                l = m + 1
        if self.can_eat(piles, l, H):
            return l
        return r
    
    
    def can_eat(self, piles, speed, H):
        c = 0
        for pile in piles:
            if pile <= speed:
                c += 1
            else:
                c += pile // speed + 1
        return c <= H
                
                
