# recursion
class Solution:
    def findStrobogrammatic(self, n: int) -> List[str]:
        even_mid = ['0', '1', '8']
        odd_mid = ['00', '11', '88', '69', '96']
        if n == 1:
            return even_mid
        if n == 2:
            return odd_mid[1:]
        
        if n % 2 == 1:
            pre_res = self.findStrobogrammatic(n - 1) 
            mid = even_mid
        else:
            pre_res = self.findStrobogrammatic(n - 2) 
            mid = odd_mid
        
        return [pre[ : (n - 1)//2] + m + pre[(n - 1) // 2 : ] for m in mid for pre in pre_res]
            


题目中给了提示说可以用递归来做，而且提示了递归调用n-2，而不是n-1。我们先来列举一下n为0,1,2,3,4的情况：

n = 0:   none
n = 1:   0, 1, 8
n = 2:   11, 69, 88, 96
n = 3:   101, 609, 808, 906, 111, 619, 818, 916, 181, 689, 888, 986
n = 4:   1001, 6009, 8008, 9006, 1111, 6119, 8118, 9116, 1691, 6699, 8698, 9696, 1881, 6889, 8888, 9886, 1961, 6969, 8968, 9966

# 我们注意观察n=0和n=2，可以发现后者是在前者的基础上，每个数字的左右增加了[1 1], [6 9], [8 8], [9 6]，
# 看n=1和n=3更加明显，在0的左右增加[1 1]，变成了101, 在0的左右增加[6 9]，变成了609, 在0的左右增加[8 8]，变成了808, 
# 在0的左右增加[9 6]，变成了906, 然后在分别在1和8的左右两边加那四组数，我们实际上是从m=0层开始，一层一层往上加的，
# 需要注意的是当加到了n层的时候，左右两边不能加[0 0]，因为0不能出现在两位数及多位数的开头，在中间递归的过程中，
# 需要有在数字左右两边各加上0的那种

'00 11 88 69 96'.split()[n<2:]
# This could mean that
>> a = ['00','11','88','69','96']
>> a[n<2:]

# this one could mean a[True:] or a[False:]


class Solution(object):
    def findStrobogrammatic(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n % 2 == 0:
            nums = ['']
        else:
            nums = list('018')
        
        while n >= 2:
            n -= 2
            nums = [a + num + b for num in nums for a, b in '00 11 88 69 96'.split()[n < 2:]]
            
        return nums
        
class Solution:
    def findStrobogrammatic(self, n: int) -> List[str]:
        res = []
        pair = ["11","69","88","96", '00']
        pair_except_00 = ["11","69","88","96"]
        
        if n % 2: # odd
            res = ['1', '8', '0']
            n -= 1
        else:
            if n == 2:
                return pair_except_00
            res = pair
            n -= 2
            
        while n:
            if n == 2:
                new_res = []
                for ele in res:
                    for c1, c2 in pair_except_00:
                        new_res.append(c1 + ele + c2)
                res = new_res
            else:
                new_res = []
                for ele in res:
                    for c1, c2 in pair:
                        new_res.append(c1 + ele + c2)
                res = new_res
            n -= 2
                
        return res
