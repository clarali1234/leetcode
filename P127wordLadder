BFS

# time O(m*m*n) # m is length of words, n is word numbers, m * n possible words, and takes m to get each new word
# space O(m * n)

class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        visited = set()
        wordDict = set(wordList)
        
        q = collections.deque([(beginWord, 1)])
        while q:
            word, step = q.popleft()
            if word == endWord:
                return step
            for i in range(len(word)):
                for val in range(ord('a'), ord('z') + 1):
                    char = chr(val)
                    new_w = word[:i] + char + word[i + 1: ]
                    if new_w not in visited and new_w in wordDict:
                        visited.add(new_w)
                        q.append((new_w, step + 1))
        return 0
        
        

time : where M is the length of words and N is the total number of words in the input word list. 
Finding out all the transformations takes M iterations for each of the N words. 
Also, breadth first search in the worst case might go to each of the N words.

space : to store all M transformations for each of the N words, 
in the all_combo_dict dictionary. Visited dictionary is of N size. 
Queue for BFS in worst case would need space for all N words.


class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        
        wordset = set(wordList)
        queue = collections.deque([(beginWord, 1)])
        while queue:
            word, length = queue.popleft()
            if word == endWord:
                return length
            for i in range(len(word)):
                for c in 'abcdefghijklmnopqrstuvwxyz':
                    new_word = word[:i] + c + word[i + 1:]
                    if new_word in wordset and new_word != word:
                        queue.append((new_word, length + 1))
                        wordset.remove(new_word)
        return 0
