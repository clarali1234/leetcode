# left c + 1: > k, dfs -> left
# left c + 1: < k,  dfs(right, k - leftC - 1)
# left c + 1: = k, return root

class Solution(object):
    def kthSmallest(self, root, k):
        
        self.res = 0
        self.dfs(root, k)
        return self.res

    def dfs(self, node, k): # output 
        if not node:
            return 0
        
        left_c = self.dfs(node.left, k)
        if left_c + 1 == k:
            self.res = node.val
            return left_c + 1
        
        if left_c + 1 < k:
            right_c = self.dfs(node.right, k - left_c - 1)
            return left_c + right_c + 1

        if left_c + 1 > k:
            return left_c + 1






1. BST in-order traversal 两种实现
    recurion: time O(n), space O(n) to hold our res
    iteration: time O(h + k), space O(h + k) since we need to go down into the tree before we start poping
    
2. follow up
使用 Binary Search Tree Iterator 的方式（可以参考 binary search tree iterator 那个题）
用 stack，从第一个点开始，走 k-1 步，就是第 k 个点了。
时间复杂度是 O(h + k)O(h+k) h 是树的高度。

#sol1 inorder traversal, BST 非减序列
# time O(n), space O(h)
class TreeNode(object):
    def __init__(self, x, left = None, right = None):
        self.val = x
        self.left = left
        self.right = right
        
class Solution(object):
    
    def kthSmallest(self, root, k):
        self.res = []
        self.in_order(root)
        return self.res[k-1]
    
    def in_order(self, root):
        if not root:
            return 
        
        self.in_order(root.left)
        self.res.append(root.val)
        self.in_order(root.right)
        
 ## 非递归实现中序遍历，防止stack overflow
 # sol2 : iteration, time O(h + k), space O(h + k)
 
class Solution(object):
    def kthSmallest(self, root, k):

        stack = []
        cur = root
        
        while cur or stack:
            while cur:
                stack.append(cur)
                cur = cur.left 
                
            node = stack.pop()
            k -= 1
            if k == 0:
                return node.val 
            cur = node.right 
                
            

# follow up
如果我们频繁的操作该树，并且频繁的调用kth函数，有什么优化方法使时间复杂度降低至O(h)？
h是树的高度。根据提示，我们可以在TreeNode中加入一个rank成员，这个变量记录的是该节点的个数
这样我们就可以用二叉树搜索的方法来解决这个问题了。这个添加rank的操作可以在建树的时候一起完成。


sol1:
Insert H
Delete H 
Find kth smallest time O(H + K) overall O(2H + K) 

# doubly linked list
# insert/delete O(H), find O(K)

时间复杂度 O(n)最好最坏都是。
算法思想类似于 Quick Select。
这个算法的好处是，如果多次查询的话，给每个节点统计儿子个数这个过程只需要做一次。查询可以很快。

class Solution(object):
    def kthSmallest(self, root, k):
        # key: node, value: number of children
        map = {}
        self.count_node(root, map)
        return self.quick_select(root, k, map)
        
    def count_node(self, node, map):
        if not node:
            return 0
        left = self.count_node(node.left, map)
        right = self.count_node(node.right, map)
        map[node] = left + right + 1
        return left + right + 1
        

    def quick_select(self, root, k, map):
        
        if not root:
        return -1
        
        l = 0
        if not root.left:
            l = 0
        else:
            l = map[root.left]
        
        if k == l+1:
            return root.val
        if l >= k:
            return self.kthSmallest(root.left, k, map)
        else:
            return self.kthSmallest(root.righ, k - l - 1, map)
        
        
        
