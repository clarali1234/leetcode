# algo: prefix sum + binary search
# time O(w) + O(lgw)
# space o(w)

# step 1: Compute the prefix sum array pp
# step 2: Generate a random integer in the range [0,tot)
# step 3: Use binary search to find the index x where x is the first index in prefix sum > random int

# w: [1, 3]
# [0, 1) [1, 4) 
# rand int from 0 | 1 2 3 if 0
# first index in prefix sum > randint


class Solution(object):

    def __init__(self, w):
        """
        :type w: List[int]
        """
        self.prefix_s = []
        total = 0
        for num in w:
            total += num
            self.prefix_s.append(total)
        self.total = total

    def pickIndex(self):
        """
        :rtype: int
        """
        randint = random.randint(0, self.total - 1)
        # fist index > randint in prefix sum
        l = 0
        r = len(self.prefix_s) - 1
        while l + 1 < r:
            m = (l + r) // 2
            if self.prefix_s[m] > randint:
                r = m 
            else:
                l = m + 1

        if self.prefix_s[l] > randint:
            return l
        return r




import random
class Solution:

    def __init__(self, w: List[int]):
        self.w = w
        self.pre_s = [0 for _ in range(len(w))]
        
        cur_s = 0
        for i in range(len(self.pre_s)):
            cur_s += self.w[i]
            self.pre_s[i] = cur_s
            
        
    def pickIndex(self) -> int:
        randint = random.randint(0, self.pre_s[-1] - 1)
        i = 0
        j = len(self.w) - 1
        
        while i + 1 < j:
            m = (i + j) // 2
            if self.pre_s[m] <= randint:
                i = m + 1
            else:
                j = m
                
        if self.pre_s[i] > randint:
            return i
        return j
        
    
