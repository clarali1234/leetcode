# sol1:preorder traversal
 time O(n), space O(h)
 
 class Solution(object):
    def sumNumbers(self, root):
        
        self.res = 0
        self.dfs(root, 0)
        return self.res

    def dfs(self, node, num):
        if not node:
            return 

        num = num * 10 + node.val
        if not node.left and not node.right:
            self.res += num
            return 

        self.dfs(node.left, num)
        self.dfs(node.right, num)
            
 # bfs time O(n), space O(n)
 class Solution:
    def sumNumbers(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        res = 0
        queue = collections.deque([(root, 0)])
        
        while queue:
            node, value = queue.popleft()
            if not node.left and not node.right:
                res += (value * 10 + node.val)
            if node.left:
                queue.append((node.left, value * 10 + node.val))
            if node.right:
                queue.append((node.right, value * 10 + node.val))
        return res
