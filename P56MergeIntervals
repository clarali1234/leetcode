# 将区间按起点从小到大排序，然后从左到右扫一遍找最远的右端点。
# 交错或包含的区间就合并。
# if curt.start <= last.end
  # merge
# else:
  # insert a new interval
 
 
 
class Solution(object):
    def merge(self, intervals):
       
        if not intervals:
            return []

        intervals.sort(key = lambda x : x[0])
        res = [intervals[0]]
        for x, y in intervals[1: ]:
            # merge
            if x >= res[-1][0] and x <= res[-1][1]:
                res[-1][1] = max(y, res[-1][1]) 

            # [x, y] in internal right
            elif x > res[-1][1]:
                res.append([x, y])

        return res

            
            
  
# time o(nlgn)
# space O(n)
class Solution(object):
    def merge(self, intervals):
        
        intervals.sort(key = lambda x : x[0])
        res = []
        
        for s, e in intervals:
            if not res or res[-1][1] < s:
                res.append([s, e])
            else:
                res[-1][1] = max(e, res[-1][1])
        return res
                
