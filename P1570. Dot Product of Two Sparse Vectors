https://leetcode.com/problems/dot-product-of-two-sparse-vectors/solutions/926985/python-3-99-16-faster/?envType=company&envId=facebook&favoriteSlug=facebook-three-months

class SparseVector:
    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = {i: n for i, n in enumerate(nums) if n}

    # Return the dotProduct of two sparse vectors
    def dotProduct(self, vec):
        """
        :type vec: 'SparseVector'
        :rtype: int
        """
        result = 0
        if len(self.nums) < len(vec.nums):
            for key in self.nums.keys():
                if key in vec.nums:
                    result += self.nums[key] * vec.nums[key]
        else:
            for key in vec.nums.keys():
                if key in self.nums:
                    result += self.nums[key] * vec.nums[key]
                    
        return result  



class SparseVector:
    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        # (index, val)
        self.pairs = []
        for i, num in enumerate(nums):
            if num:
                self.pairs.append((i, num))

    # Return the dotProduct of two sparse vectors
    def dotProduct(self, vec):
        """
        :type vec: 'SparseVector'
        :rtype: int
        """
        i = 0
        j = 0
        res = 0
        while i < len(self.pairs) and j < len(vec.pairs):
            if self.pairs[i][0] == vec.pairs[j][0]:
                res += self.pairs[i][1] * vec.pairs[j][1]
                i += 1
                j += 1
            elif self.pairs[i][0] < vec.pairs[j][0]:
                i += 1
            else:
                j += 1
        return res

        

# Your SparseVector object will be instantiated and called as such:
# v1 = SparseVector(nums1)
# v2 = SparseVector(nums2)
# ans = v1.dotProduct(v2)
