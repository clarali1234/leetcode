# https://www.youtube.com/watch?v=Xdt5Z583auM

class Solution(object):
    def minTime(self, n, edges, hasApple):
       
        adj = { i:[] for i in range(n)}

        for par, child in edges:
            adj[par].append(child)
            adj[child].append(par)
        return self.dfs(adj, hasApple, 0, -1)

    def dfs(self, adj, hasApple, cur, par):
        time = 0
        for child in adj[cur]:
            if child == par:
                continue
            child_time = self.dfs(adj, hasApple,  child, cur)
            if child_time or hasApple[child]:
                time += 2 + child_time
        return time
