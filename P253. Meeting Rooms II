# 扫描线算法 time O(nlgn)
# 先排序再扫描

class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        points = []
        for interval in intervals:
            points.append((interval[0], 1))
            points.append((interval[1], -1))
        
        meeting_room = 0
        ongoing_meeting = 0
        for _, delta in sorted(points):
            ongoing_meeting += delta
            meeting_room = max(meeting_room, ongoing_meeting)
        return meeting_room

# heap
# time O(nlgn)
# space O(n)
# idea: if cureent start > min end -> need more room; or free previous room

from heapq import *

class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        intervals.sort()
        heap = []
        res = 0
        for s, e in intervals:
            while heap and heap[0] <= s:
                heappop(heap)
            heappush(heap, e)
            res = max(res, len(heap))
        return res
