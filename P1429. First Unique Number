# brute force 
# array + hashtable key: val, value: count
# time show first unique char O(n)

class FirstUnique(object):

    def __init__(self, nums):
        
        self.q = nums
        self.counter = collections.Counter(nums)
        

    def showFirstUnique(self):
       
        for num in self.q:
            if self.counter[num] == 1:
                return num
        return -1

    def add(self, value):
        
        self.q.append(value)
        self.counter[value] = self.counter.get(value, 0) + 1


# sol2 : duoubly linked list + hash table 
# time first unique num O(1)
class ListNode(object):
    def __init__(self, num, prev = None, nxt = None):
        self.num = num
        self.prev = prev
        self.next = nxt

class FirstUnique:

    def __init__(self, nums: List[int]):
        self.nums = nums
        self.counter = collections.Counter(nums)
        self.dic = {} #k: num, value: node
        self.dummy_head = ListNode(0)
        self.dummy_tail = ListNode(0)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head
        
        for num in nums:
            if num not in self.dic and self.counter[num] == 1:
                node = ListNode(num)

                self.insert(node)
                self.dic[num] = node

    def showFirstUnique(self) -> int:
        if self.dummy_head.next != self.dummy_tail:
            return self.dummy_head.next.num
        return -1

    def add(self, value: int) -> None:
        prev_c = self.counter.get(value, 0)
        if prev_c == 0:
            node = ListNode(value)
            self.insert(node)
            self.dic[value] = node
            
        elif prev_c == 1:
            node = self.dic[value]
            self.delete(node)
            del self.dic[value]
        
        self.counter[value] = prev_c + 1
            
            
    
    def insert(self, node): # insert from the tail
        tail = self.dummy_tail.prev
        tail.next = node
        node.prev = tail
        node.next = self.dummy_tail
        self.dummy_tail.prev = node
        
        
    def delete(self, node):
        prev = node.prev
        nxt = node.next
        prev.next = nxt
        nxt.prev = prev
