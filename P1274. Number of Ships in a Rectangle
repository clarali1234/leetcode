Solution: Divide and Conquer

If the current rectangle contains ships, subdivide it into 4 smaller ones until
1)base case 1: no ships contained
2)base case2: the current rectangle is a single point (e.g. topRight == bottomRight)


Time complexity: O(10 * logmn) (mn, quad search)
Space complexity: O(logmn)

class Solution(object):
    def countShips(self, sea, topRight, bottomLeft):
        
        x1 = bottomLeft.x
        y1 = bottomLeft.y
        x2 = topRight.x
        y2 = topRight.y
        
        # base case 1
        if x1 > x2 or y1 > y2 or not sea.hasShips(topRight, bottomLeft):
            return 0
        
        # base case 2
        if x1 == x2 and y1 == y2:
            return 1
        
        # recursion part
        xm = (x1 + x2) // 2
        ym = (y1 + y2) // 2
        return self.countShips(sea, Point(xm, ym), Point(x1, y1)) + 
        self.countShips(sea, Point(x2, y2), Point(xm + 1, ym + 1)) + 
        self.countShips(sea, Point(xm, y2), Point(x1, ym + 1)) + 
        self.countShips(sea, Point(x2, ym), Point(xm + 1, y1))



class Solution(object):
    def countShips(self, sea: 'Sea', topRight: 'Point', bottomLeft: 'Point') -> int:
        
        
        if topRight.x < bottomLeft.x or topRight.y < bottomLeft.y:
            return 0
        
        if not sea.hasShips(topRight, bottomLeft):
            return 0
        
        if topRight.x == bottomLeft.x and topRight.y == bottomLeft.y:
            return 1
        
        mid_x = (topRight.x + bottomLeft.x) // 2
        mid_y = (topRight.y + bottomLeft.y) // 2
        return self.countShips(sea, topRight, Point(mid_x + 1, mid_y + 1)) +  self.countShips(sea, Point(mid_x, mid_y), bottomLeft) + self.countShips(sea, Point(topRight.x, mid_y), Point(mid_x + 1, bottomLeft.y)) + self.countShips(sea, Point(mid_x, topRight.y), Point(bottomLeft.x, mid_y + 1))
            
        
