visited set to record all nodes on the path from node p to the root node
start from node q, if encounter a node that exists in the hash table
return res
time O(n)
space O(n)

class Solution(object):
    def lowestCommonAncestor(self, p, q):
        visited = set()
        node = p
        while node:
            visited.add(node)
            node = node.parent
            
        node = q
        while node not in visited:
            node = node.parent
        return node

two pointers and to point to nodes respectively, and then traverse towards the root node. When a and b meet, it is the nearest common ancestor of 
Otherwise, if pointer  traverses to the root node, then we let it point to node 
In this way, when the two pointers meet, it is the nearest common ancestor of 

# space O(1)
class Solution(object):
    def lowestCommonAncestor(self, p, q):
        a, b = p, q
        while a != b:
            a = a.parent if a.parent else q
            b = b.parent if b.parent else p
        return a
