# method 1: priority queue
# 遍历所有的node, 每次从长度为k的priority queue里面取出最小的
# time O(nlgk)， space O(k)

# priority queue 本质上是list，但是给val 赋予了priority， 每次都会pop出priority最小的值，因为size为k，所以time, space complexity会减少
# 不需要create new list node for node value, just use the input nodes, so the space complexity is O(k), is the space for 
# priority queue

The problem while adding ListNode objects as tasks is that the Tuple comparison breaks for (priority, task) pairs 
if the priorities are equal and the tasks do not have a default comparison order. The solution is to store entries as 3-element list including the priority,
an entry count, and the task.
The entry count serves as a tie-breaker so that two tasks with the same priority are returned in the order they were added.
And since no two entry counts are the same, the tuple comparison will never attempt to directly compare two tasks.

from queue import * 

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists or len(lists) == 1 and not lists[0]:
            return []
        
        q = PriorityQueue()
        count = 0
        for l in lists:
            if l:
                q.put((l.val, count, l))
                count += 1
        print(q)
        
        dummy = ListNode(0)
        cur = dummy
        while not q.empty():
            val, c, node = q.get()
            cur.next = node
            if node.next:
                q.put((node.next.val, c + 1, node.next))
            cur = cur.next
        return dummy.next

class Solution(object):
    def mergeKLists(self, lists):
        
        cur = dummy = ListNode(0)
        heap = []
        for l in lists:
            if l:
                heappush(heap, (l.val, l))

        while heap:
            val, node = heappop(heap)
            cur.next = node
            cur = cur.next
            if node.next:
                heappush(heap, (node.next.val, node.next))

        return dummy.next



# brute force
# traverse all list -> array 
# sort
# construct new list
# time O(nlgn), space O(n)

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        # convert k lists to arrat
        vals = []
        for l in lists:
            while l:
                vals.append(l.val)
                l = l.next
        
        # construct new nodes
        head = pointer = ListNode(0)
        for v in sorted(vals):
            new_node = ListNode(v)
            pointer.next = new_node
            pointer = pointer.next
        return head.next


# method 2: divide and conquer
# time O(nlgk), space O(lgk) -> O(1)

'''

0, 1 ; 2, 3; 4, 5
0, 
l1, l2, l3, l4, l5 (0, k) i, i + 1,  interval  0

l1,     l3,     l5  (i, 2i + 1),               2. (1, 3) (5, 7)
   
l1, l5              (i, 4i + 1)                4

l1

'''
class Solution(object):
    def mergeKLists(self, lists):
        if not lists:
            return None

        interval = 1
        n = len(lists)

        while interval <= n:
            i = 0
            while i + interval < n:
                lists[i] = self.merge_two(lists[i], lists[i + interval])
                i += interval * 2
            interval *= 2

        return lists[0]

    def merge_two(self, l1, l2):
        cur = dummy = ListNode(0)
        while l1 and l2:
            if l1.val <= l2.val:
                cur.next = l1
                l1 = l1.next
            else:
                cur.next = l2
                l2 = l2.next
            cur = cur.next
        
        if l1:
            cur.next = l1
        if l2:
            cur.next = l2

        return dummy.next
