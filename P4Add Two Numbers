# time O(m + n)
# space O(m + n)

# add from left to right
# (2 -> 4 -> 3 -> 1)
# (5 -> 6 -> 4)
#  7 -> 0 -> 8 -> 1
# 从左到右一次遍历

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        
        p1 = l1
        p2 = l2
        carry = 0
        
        dummy = ListNode(0)
        cur_p = dummy
        
        while p1 or p2 or carry:
            if p1:
                carry += p1.val
                p1 = p1.next
            if p2:
                carry += p2.val
                p2 = p2.next
            
            cur = carry % 10
            carry = carry // 10
            cur_p.next = ListNode(cur)
            cur_p = cur_p.next
            
        return dummy.next
            
                
             
# recursion

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        cur_val = l1.val + l2.val
        carry = cur_val // 10
        cur_val = cur_val % 10
        res = ListNode(cur_val)
        if l1.next or l2.next or carry:
            new_l1 = l1.next if l1.next else ListNode(0)
            new_l2 = l2.next if l2.next else ListNode(0)
            new_l1.val = new_l1.val + carry
            res.next = self.addTwoNumbers(new_l1, new_l2)
        return res
        
