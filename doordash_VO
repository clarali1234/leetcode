
# 1. number of island 
    dfs recursion + visited set, time O(mn), space O(mn)
    dfs recursion + change grid cell, time O(mn), space O(depth of recursion)
    iterative dfs to aviod stack overflow
    # bfs vs dfs
    both bfs and dfs are used to search for graph
    bfs is queue based implementation, when we visited a node, we visited all of its 
    neighrbo first which means that we go wide then go deep
    dfs is stack based implementatio, when we visited a node, we visited its neighbor
    and call dfs for this neighbor then go wide

    bfs is used to find shortest path for simple graph
    dfs is used to explore all the possibility
    
# iterative dfs
class Solution(object):
    def numberIslands(self, grid):
        self.res = 0
        self.visited = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1' and (i, j) not in self.visited:
                    self.stack = [[i, j]]
                    self.visited.add((i, j))
                    self.dfs(grid)
                    self.res += 1
        return self.res
                    
    
    def dfs(self, grid):
        
        while self.stack:
            x, y = self.stack.pop()
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == '1' and (new_x, new_y) not in self.visited:
                    self.visited.add((new_x, new_y))
                    self.stack.append((new_x, new_y))
        
test = Solution()
grid = [['1', '0', '1'],
        ['1', '1', '1'],
        ['1', '0', '1']]
print(test.numberIslands(grid)) # return 2


# bfs
import collections
class Solution(object):
    def numberIslands(self, grid):
        self.res = 0
        self.visited = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1' and (i, j) not in self.visited:
                    self.q = collections.deque([(i, j)])
                    self.visited.add((i, j))
                    self.bfs(grid)
                    self.res += 1
        return self.res
                    
    
    def bfs(self, grid):
        
        while self.q:
            x, y = self.q.popleft()
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == '1' and (new_x, new_y) not in self.visited:
                    self.visited.add((new_x, new_y))
                    self.q.append((new_x, new_y))
        
test = Solution()
grid = [['1', '0', '1'],
        ['1', '1', '1'],
        ['1', '0', '1']]
print(test.numberIslands(grid)) # return 2



# follow up1: area of each island 

class Solution(object):
    def areaIsland(self, grid):
        self.res = []
        self.visited = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1' and (i, j) not in self.visited:
                    self.area = 0
                    self.visited.add((i, j))
                    self.dfs(grid, i, j)
                    self.res.append(self.area)
        return self.res
    
    def dfs(self,grid, x, y):
        
        self.area += 1
        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and (new_x, new_y) not in self.visited and grid[new_x][new_y] == '1':
                self.visited.add((new_x, new_y))
                self.dfs(grid, new_x, new_y)
        
test = Solution()
grid = [['1', '0', '1'],
        ['1', '0', '1']]
        
print(test.areaIsland(grid)) # return 2




# 2. food delivery
# valid pickup order 
'''
就是地里常有的题，给你一个pickup 和delivery的order序列，问这个序列是否为有效序列。
例如 P1D1P3P2D2D3  ，主要判断标准其实就是对于某个orderId，pickup一定要在delivery发生之前.除此以外，还有些conner case，
例如同一个order,pickup 了两次或者deliver了两次，都是invalid的。P1 D1 P1 D1也是invalid的，不能有重复的pick up

'''

import collections
class Solution:
    def validOrders(self, orders):
        pairs = set()
        pickups = set()
        for ele in orders:
            if ele.startswith('P'):
                if ele in pickups or ele in pairs:
                    return False
                pairs.add(ele)
                pickups.add(ele)
            else:
                cur_pickup = 'P' + ele[1]
                if cur_pickup not in pairs:
                    return False
                pairs.remove(cur_pickup)
        return len(pairs) == 0
                
                
test = Solution()
order1 = ['P1', 'D1']
order2 = ['P1', 'D2']
order3 = ['D1', 'P1']
order4 = ['P1', 'P1']
order5 = ['P1', 'D1','P1', 'D1' ]
print(test.validOrders(order5))

# return all possibility
class Solution(object):
    def foodDelivery(self, n):
        if n == 0:
            return []
        if n == 1:
            return [['P1', 'D1']]
                     
        self.n = n
        self.res = []
        self.dfs(1, 1, ['P1', 'D1'])
        return self.res
        
    
    def dfs(self, P, D, cur):
        if P == self.n and D == self.n:
            self.res.append(cur)
            return 
        # [p1, d1]
        for i in range(len(cur)): # insert p at (0, len(cur) -1)
            cur1 = cur[:i] + ['P' + str(P + 1)] + cur[i:]
            for j in range(i + 1, len(cur1)):
                cur_path = cur1[:j] + ['D' + str(D + 1)] + cur1[j:]
                self.dfs(P + 1, D + 1, cur_path)
            cur1.append('D' + str(D + 1))
            self.dfs(P + 1, D + 1, cur1)
                           
        self.dfs(P + 1, D + 1, cur + ['P' + str(P + 1), 'D' + str(D + 1)])
                 
test = Solution()
print(test.foodDelivery(2)) # return 2
         
         
 # count all pickup and delivery options
 class Solution:
    def countOrders(self, n: int) -> int:
        res = 1
        mod = 10 ** 9 + 7
        for i in range(2, n + 1):
            res *= (2 * i - 1) * i
        return res % mod
        
        
3. Design Brower History
# stack with fixed lenght
# time O(1) for each method, space O(n)
class BrowserHistory:

    def __init__(self, homepage: str):
        self.stack = ['' for _ in range(5001)]
        self.stack[0] = homepage
        self.cur = 0
        self.end = 0

    def visit(self, url: str) -> None:
        self.cur += 1
        self.stack[self.cur] = url
        self.end = self.cur
        

    def back(self, steps: int) -> str:
        self.cur = max(0, self.cur - steps)
        return self.stack[self.cur]
        

    def forward(self, steps: int) -> str:
        self.cur = min(self.end, self.cur + steps)
        return self.stack[self.cur]
        
        
# stack with dynamic length
# time visited O(n), others O(1), space O(1)
class BrowserHistory:
    def __init__(self, homepage: str):
        self.stack = []
        self.stack.append(homepage)
        self.cur = 0

    def visit(self, url: str) -> None:
        while len(self.stack) > self.cur + 1:
            self.stack.pop()
        self.stack.append(url)
        self.cur += 1

    def back(self, steps: int) -> str:
        self.cur = max(0, self.cur - steps)
        return self.stack[self.cur]

    def forward(self, steps: int) -> str:
        self.cur = min(len(self.stack) - 1, self.cur + steps)
        return self.stack[self.cur]
        
        
4. 355. Design Twitter
# brute force 
# followers dic
# tweet dic
# time = 0

# get news feed: O(nlgn), sort by time then take 10, n is num of tweets
# heap, O(10 * lgn + n), put all followees' tweets into heap
# dic + heap + sorted linked list, O(10 * logk) k: num of followees
class TweetNode(object):
    def __init__(self, time, val, nxt = None):
        self.time = time
        self.val = val
        self.next = nxt
        

class Twitter:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.followers = collections.defaultdict(set) # key: followerId, val: followee
        self.tweets = {}
        self.time = 1
        
    def postTweet(self, userId: int, tweetId: int) -> None:
        """
        Compose a new tweet.
        """
        self.time += 1
        node = TweetNode(-self.time, tweetId)
        if userId not in self.tweets:
            self.tweets[userId] = node
        else:
            node.next = self.tweets[userId]
            self.tweets[userId] = node

        
    def getNewsFeed(self, userId: int) -> List[int]:
        """
        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
        """
        heap = []
        if userId not in self.followers[userId]:
            self.followers[userId].add(userId)
        
        for followee in list(self.followers[userId]):
            if followee in self.tweets:
                heappush(heap, (self.tweets[followee].time, self.tweets[followee]))
        
        res = []
        k = 10
        while heap and k > 0:
            time, cur_node = heappop(heap)
            res.append(cur_node.val)
            if cur_node.next:
                heappush(heap, (cur_node.next.time, cur_node.next))
            k -= 1
        return res
            

    def follow(self, followerId: int, followeeId: int) -> None:
        """
        Follower follows a followee. If the operation is invalid, it should be a no-op.
        """
        if followeeId not in self.followers[followerId]:
            self.followers[followerId].add(followeeId)
        

    def unfollow(self, followerId: int, followeeId: int) -> None:
        """
        Follower unfollows a followee. If the operation is invalid, it should be a no-op.
        """
        if followeeId in self.followers[followerId]:
            self.followers[followerId].remove(followeeId)


# heap + dic
class Twitter:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.t = 0
        self.follow_dict = collections.defaultdict(set)
        self.user_twit = collections.defaultdict(list)
        

    def postTweet(self, userId: int, tweetId: int) -> None:
        """
        Compose a new tweet.
        """
        self.t += 1
        self.user_twit[userId].append([-self.t, tweetId])

    def getNewsFeed(self, userId: int) -> List[int]:
        """
        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.
        """
        res = []
        cur_heap = []
        
        if userId not in self.follow_dict[userId]:
            self.follow_dict[userId].add(userId)
        for f in list(self.follow_dict[userId]):
            cur_heap += self.user_twit[f]
        
        heapify(cur_heap)
        count = 10
        while cur_heap and count > 0:
            time, lastest_p = heappop(cur_heap)
            res.append(lastest_p)
            count -= 1
        return res
   
   def follow(self, followerId: int, followeeId: int) -> None:
        """
        Follower follows a followee. If the operation is invalid, it should be a no-op.
        """
        
        self.follow_dict[followerId].add(followeeId)

   def unfollow(self, followerId: int, followeeId: int) -> None:
        """
        Follower unfollows a followee. If the operation is invalid, it should be a no-op.
        """
        if followeeId in self.follow_dict[followerId]:
            self.follow_dict[followerId].remove(followeeId)


5. '''
implement 一个in memory database，需要有get，set，unset， begin，rollback，commit等功能
API都定义好了，直接paste一大段题目自己读，有10个test cases，这轮写的还算顺利，很快就pass all test cases
'''

class Database(object):
    def __init__(self):
        self.database = {}
        self.transaction = []
    
    def get(self, key):
        if key in self.database:
            return self.database[key]
        return -1
    
    def dbset(self, key, val):
        pre_val = self.database[key] if key in self.database else -1
        self.transaction.append([key, pre_val])
        self.database[key] = val
        
        
    def unset(self, key):
        del self.database[key]
        
    def rollback(self):
        while self.transaction:
            key, pre_val = self.transaction.pop()
            self.database[key] = pre_val
            
    def commit(self):
        self.transaction = []
            
