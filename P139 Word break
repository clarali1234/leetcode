# brute force 
# time O(2^n) eg: 'aaaaa',for each space, add space or not 
# spce O(n)，递归的深度,递归在内存中同时存在的最大次数

class Solution(object):
    def wordBreak(self, s, wordDict):
        
        return self.dfs(s, 0, wordDict)
    
    def dfs(self, s, index, wordDict):
        if index == len(s):
            return True
        
        for j in range(index, len(s)):
            if s[index : j + 1] in wordDict and self.dfs(s, j + 1, wordDict):
                return True
        return False
    
        
# problem with sol1, many subproblems are redundant, we were calling recursive funtions many times for a particular string
# so we use hash table to store the result of subproblems that we've calculated.

# sol2 recursion time O(n^3), tree size O(n^2), string slice takes O(n)
# space O(n) (memo O(n), max depth of recursion is O(n))
# key: start index, value: res of the recursive function for this start index

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        self.memo = {} #key: start Index, value: true/false
        return self.dfs(s, wordDict, 0)
    
    def dfs(self, s, wordDict, cur_index):
        if cur_index == len(s):
            self.memo[cur_index] = True
            return True
        
        if cur_index in self.memo:
            return self.memo[cur_index]
        
        for j in range(cur_index, len(s)):
            if s[cur_index : j + 1] in wordDict and self.dfs(s, wordDict, j + 1):
                self.memo[cur_index] = True
                return True
        
        self.memo[cur_index] = False
        return False
                
            
        

# sol3: dp

# dp[i] means s[:i] first i chars can be segmented into words in the wordDicts
# init dp[0] = True, empty string
# transmation formula: if dp[i] and s[i : j] in dic, dp[j] is True
# res dp[-1]

# time O(n^3)
# space O(n)

class Solution(object):
    def wordBreak(self, s, wordDict):
        
        dp = [False for _ in range(len(s) + 1)]
        dp[0] = True
        
        for i in range(len(dp)):
            for j in range(i + 1, len(dp)):
                if dp[i] and s[i : j] in wordDict:
                    dp[j] = True
                        
        return dp[-1]
        
 # follow up 1 只输出一组解
 # 思路用dp，因为只输出一组解，所以不需要用dfs
class Solution(object):
    def wordBreak(self, s, wordDict):
        dp = [False for _ in range(len(s) + 1)]
        dp[0] = True
        paths = ['' for _ in range(len(s) + 1)]
        
        for i in range(len(dp)):
            for j in range(i + 1, len(dp)):
                if dp[i] and s[i : j] in wordDict:
                    dp[j] = True
                    if not paths[i]:
                        paths[j] = s[i : j]
                    else:
                        paths[j] = paths[i] +  ' ' +  s[i : j]
        if dp[-1]:
            return paths[-1]
        return ''
    

test = Solution()
s1 = 'catsanddog'
wordDict1 = ['cats', 'and', 'dog', 'cat', 'sand']
print(test.wordBreak(s1, wordDict1))

                                     
 

 
 
 
 
  
       
