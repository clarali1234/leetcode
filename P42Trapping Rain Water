class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        l_max = height[0]
        r_max = height[-1]
        l, r = 0, len(height) - 1

        res = 0
        while l < r:
            l_max = max(l_max, height[l])
            r_max = max(r_max, height[r])

            if height[l] < min(l_max, r_max):
                res += min(l_max, r_max) - height[l]
            if height[r] < min(l_max, r_max):
                res += min(l_max, r_max) - height[r]

            if height[l] <= height[r]:
                l += 1
            else:
                r -= 1
        return res
            





# time O(n), space O(n),扫描
# for each element, the traped water is the difference bewteen the minumum of left max and right max height to it's current
# height

# 每个位置上的盛水数目 = min(左侧最高，右侧最高) - 当前高度
# 从左到右扫描一边数组，获得每个位置往左这一段的最大值，再从右到左扫描一次获得每个位置向右的最大值。
# 然后最后再扫描一次数组，计算每个位置上的盛水数目。
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        left = []
        h_l = 0
        for i in range(len(height)):
            h_l = max(h_l, height[i])
            left.append(h_l)
        
        right = []
        h_r = 0
        for j in range(len(height) - 1, -1, -1):
            h_r = max(h_r, height[j])
            right.append(h_r)
        right = right[::-1]
        
        res = 0
        for i in range(len(height)):
            res += min(left[i], right[i]) - height[i]

        return res

# time O(n), space o(1), two pointers
使用九章算法班中讲过的相向型双指针算法。
整个算法的思想是计算每个位置上可以盛放的水，累加起来。

记录如下几个值：

left, right => 左右指针的位置
left_max, right_max => 从左到右和从右到左到 left, right 为止，找到的最大的 height
每次比较 left_max 和 right_max，如果 left_max 比较小，就挪动 left 到 left + 1。
与此同时，查看 left 这个位置上能够盛放多少水，这里有两种情况：

时间复杂度：O(n)，空间复杂度 O(1)
class Solution(object):
    def trap(self, height):
       
        res = 0
        l_h = 0
        r_h = 0
        
        i = 0
        j = len(height) - 1
        
        while i <= j:
            l_h = max(l_h, height[i])
            r_h = max(r_h, height[j])
            
            if l_h <= r_h:
                res = res + (l_h - height[i])
                i += 1
                
            else:
                res = res + (r_h - height[j])
                j -= 1
                
        return res
            
