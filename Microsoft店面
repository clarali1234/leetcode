
'''
给三个sorted list，从每个list里面选一个数使得difference最小
是的，其实就是找三个数，使得他们最大值和最小值的差最小


Start with the largest elements in each of the arrays A, B & C.
Maintain a variable to update the answer during each of the steps to be followed.
In every step, the only possible way to decrease the difference is to decrease the maximum element out of the three elements.
So traverse to the next largest element in the array containing the maximum element for this step and update the answer variable.
Repeat this step until the array containing the maximum element ends.
'''

import sys

class Solution(object):
    def minDifference(self, l1, l2, l3):
        i = len(l1) - 1
        j = len(l2) - 1
        k = len(l3) - 1
        
        res = sys.maxsize
        while i >= 0 and j>= 0 and k >= 0:
            cur_diff = max(l1[i], l2[j], l3[k]) - min(l1[i], l2[j], l3[k])
            res = min(res, cur_diff)
            if max(l1[i], l2[j], l3[k]) == l1[i]:
                i -= 1
            elif max(l1[i], l2[j], l3[k]) == l2[j]:
                j -= 1
            else:
                k -= 1
                
        return res

test = Solution()
l1 = [1, 4, 10]
l2 = [2, 15, 20]
l3 = [10, 20]
print(test.minDifference(l1, l2, l3))


import collections
class Solution(object):
    def groupAnagrams(self, strings):
        dic = collections.defaultdict(list)
        for s in strings:
            c = [0 for _ in range(26)]
            for char in s:
                index = ord(char) - ord('a')
                prev = c[index]
                new = prev | 1
                c[index] = new
            dic[tuple(c)].append(s)
        return dic.values()
        

test = Solution()
s = ['good', 'god', 'anagram']
print(test.groupAnagrams(s))
            
            
'''

Degree of connection in linkedin (min distance between two nodes in a graph)
Follow-up: implement BFS without saving distance in the queue, i.e. using layers of queues
Follow-up: how would Linkedin actually implement this? (scaling, precomputing, etc.)


'''

import collections
class Solution(object):
    def minDistance(self, s, e, graph):
        q = collections.deque([(s, 0)])
        visited = set([s])
        while q:
            node, dis = q.popleft()
            if node == e:
                return dis
            for nb in graph[node]:
                if nb not in visited:
                    q.append([nb, dis + 1])
                    visited.add(nb)
        return -1
    
    
    # 0 -> 1 -> 2
   #       \ 
   #.      3
    
graph = {0: [1], 1:[2, 3], 2 : [], 3: []}
s = 0
e = 3
test = Solution()
print(test.minDistance(s, e,graph))

