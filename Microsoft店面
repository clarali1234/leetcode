
'''
给三个sorted list，从每个list里面选一个数使得difference最小
是的，其实就是找三个数，使得他们最大值和最小值的差最小


Start with the largest elements in each of the arrays A, B & C.
Maintain a variable to update the answer during each of the steps to be followed.
In every step, the only possible way to decrease the difference is to decrease the maximum element out of the three elements.
So traverse to the next largest element in the array containing the maximum element for this step and update the answer variable.
Repeat this step until the array containing the maximum element ends.
'''

import sys

class Solution(object):
    def minDifference(self, l1, l2, l3):
        i = len(l1) - 1
        j = len(l2) - 1
        k = len(l3) - 1
        
        res = sys.maxsize
        while i >= 0 and j>= 0 and k >= 0:
            cur_diff = max(l1[i], l2[j], l3[k]) - min(l1[i], l2[j], l3[k])
            res = min(res, cur_diff)
            if max(l1[i], l2[j], l3[k]) == l1[i]:
                i -= 1
            elif max(l1[i], l2[j], l3[k]) == l2[j]:
                j -= 1
            else:
                k -= 1
                
        return res

test = Solution()
l1 = [1, 4, 10]
l2 = [2, 15, 20]
l3 = [10, 20]
print(test.minDifference(l1, l2, l3))


import collections
class Solution(object):
    def groupAnagrams(self, strings):
        dic = collections.defaultdict(list)
        for s in strings:
            c = [0 for _ in range(26)]
            for char in s:
                index = ord(char) - ord('a')
                prev = c[index]
                new = prev | 1
                c[index] = new
            dic[tuple(c)].append(s)
        return dic.values()
        

test = Solution()
s = ['good', 'god', 'anagram']
print(test.groupAnagrams(s))
            
            
'''

Degree of connection in linkedin (min distance between two nodes in a graph)
Follow-up: implement BFS without saving distance in the queue, i.e. using layers of queues
Follow-up: how would Linkedin actually implement this? (scaling, precomputing, etc.)


'''

import collections
class Solution(object):
    def minDistance(self, s, e, graph):
        q = collections.deque([(s, 0)])
        visited = set([s])
        while q:
            node, dis = q.popleft()
            if node == e:
                return dis
            for nb in graph[node]:
                if nb not in visited:
                    q.append([nb, dis + 1])
                    visited.add(nb)
        return -1
    
    
    # 0 -> 1 -> 2
   #       \ 
   #.      3
    
graph = {0: [1], 1:[2, 3], 2 : [], 3: []}
s = 0
e = 3
test = Solution()
print(test.minDistance(s, e,graph))


'''

给一堆dependency
A -> B, C (b-> a, c-> a)
B -> D
C -> E

a -> b

问如果其中的一个node变了，返回所有受影响的nodes。比如说D变了，return [D,B,A]

[[A, [B,C]], ...

{A: [B, C], A:D, C:E}

'''
import collections
class Solution(object):
    def getImpactedNodes(self, l, node):
        
        graph = collections.defaultdict(list)
        for nodes in l:
            for nb in nodes[1]:
                graph[nb].append(nodes[0][0])
                
        print(graph)
        # bfs
        res = []
        q = collections.deque([node])
        visited = set()
        visited.add(node)
        while q:
            cur_node = q.popleft()
            res.append(cur_node)
            for nb in graph[cur_node]:
                if nb not in visited:
                    visited.add(nb)
                    q.append(nb)
        return res
    
    
test = Solution()
print(test.getImpactedNodes([[['A'], ['B', 'C']], [['B'],['D']], [['C'], ['E']]], 'D'))

                                     
# drop figure
# https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=744683&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3046%5D%5Bvalue%5D%3D3%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26searchoption%5B3109%5D%5Bvalue%5D%3D1%26searchoption%5B3109%5D%5Btype%5D%3Dradio%26sortid%3D311%26orderby%3Ddateline
# space '.', obstacles '#', figure 'F'
# 思路: 
# for each column
    # read pointer
    # write pointer
    
    # while r >= 0
        # if char at r '.' r -= 1
        #  r '#' and r - 1 >= 0, w = r - 1, r -= 1
        #  r 'F', write F to w, w -= 1, r-= 1
    
    # while w >= 0
     # write '.'
        

def dropFigure(matrix):
    m = len(matrix)
    n = len(matrix[0])
    
    for c in range(n):
        w = m - 1
        r = m - 1
        while r >= 0:
            if matrix[r][c] == '.':
                r -= 1
            elif matrix[r][c] == 'F':
                matrix[w][c] = 'F'
                w -= 1
                r -= 1
            else:
                if r - 1 >= 0:
                    w = r - 1
                r -= 1
        
        while r >= 0:
            matrix[r][c] = '.'
            r -= 1
    return matrix

matrix = [['F'], ['.']]
matrix2 = [['F', 'F', '.'], 
           ['.', 'F', '.'], 
           ['#', 'F', 'F'], 
           ['F', 'F', '.'],
           ['.', '.', '.'], 
           ['.', '.', '.']]
                  
print(dropFigure(matrix))
print(dropFigure(matrix2))
        
'''
Doordash virtual onsite question:
Given a set list of pickups and deliveries for order, figure out if the given list is valid or not.
A delivery cannot happen for an order before pickup.

Examples below:
[P1, P2, D1, D2]==>valid
[P1, D1, P2, D2]==>valid
[P1, D2, D1, P2]==>invalid
[P1, D2]==>invalid
[P1, P2]==>invalid
[P1, D1, D1]==>invalid
[]==>valid
[P1, P1, D1]==>invalid
[P1, P1, D1, D1]==>invalid
[P1, D1, P1]==>invalid
[P1, D1, P1, D1]==>invalid

'''

# pick before delivery
# pair (p, d)

# pickset = (1, 2, 3, ..)
# p_d pair = set(pick)



# for each ele in list:
    # if pick:
        # p in pickset:
            # return false
        # pickse
        # p_d pair.add
        
    # else:
        # if p not in set:
            # return False
        # rrenive puck
    # return set pair is empty
    
def valid_delivery(pickups):
    if not pickups:
        return True
    pickup_set = set()
    pd_pair = set()
    for ele in pickups:
        if ele[0] == 'P':
            if ele in pickup_set:
                return False
            pickup_set.add(ele)
            pd_pair.add(ele)
        else: # delivery
            cur_p = 'P' + ele[1]
            if cur_p not in pickup_set:
                return False
            if cur_p not in pd_pair:
                return False
            pd_pair.remove(cur_p)
    return len(pd_pair) == 0

print(valid_delivery(['P1', 'P2', 'D1', 'D2']))
print(valid_delivery(['P1', 'D1', 'D2'])) 
print(valid_delivery(['P1', 'P1', 'D2']))
print(valid_delivery(['P1', 'P1', 'D2', 'D2']))
print(valid_delivery([]))
    
    
    
            
