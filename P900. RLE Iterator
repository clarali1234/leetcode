
# sol1:
# time O(n)
# space O(n)
TLE
class RLEIterator:

    def __init__(self, encoding: List[int]):
        self.encoding = encoding
        self.prev = self.decoding(encoding)
        
    def next(self, n: int) -> int:
        if not self.prev or n > len(self.prev):
            return -1
        
        last = None
        for _ in range(n):
            last = self.prev.popleft()
            
        return last
    
    def decoding(self, encoding):
        arr = collections.deque()
        i = 0
        while i < len(encoding):
            count = encoding[i]
            if count > 0:
                num = encoding[i + 1]
                for _ in range(count):
                    arr.append(num)
            i += 2
        return arr
            
# sol2:
# time O(n)
# space O(1)
class RLEIterator:

    def __init__(self, encoding: List[int]):
        self.encoding = encoding
        self.i = 0
        self.q = 0

    def next(self, n: int) -> int:
        if self.i >= len(self.encoding):
            return -1
        
        while self.i < len(self.encoding) and n > 0:
            can_delete_count = self.encoding[self.i] - self.q
            if n <= can_delete_count:
                self.q += n
                return self.encoding[self.i + 1]
            else:
                self.i += 2
                self.q = 0
                n -= can_delete_count
        
        return -1

