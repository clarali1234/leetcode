class Solution(object):
    def longestPalindrome(self, s):
        res = ''
        max_l = 0
        for i in range(len(s)):
            cur_max, cur_res = self.expand_centric(s, i, i)
            if cur_max > max_l:
                res = cur_res
                max_l = cur_max
            
            cur_max, cur_res = self.expand_centric(s, i, i + 1)
            if cur_max > max_l:
                res = cur_res
                max_l = cur_max
        return res

    def expand_centric(self, s, i, j):
        while 0 <= i  and j < len(s) and s[i] == s[j]:
            j += 1
            i -= 1
        return [j - i - 1, s[i + 1 : j]]
            









# brute force, itereate each pair i, j, check if palindrome
# time O(n^3)

# method1, DP, O(n^2)
# method2, emumeration, O(n^2)

# so state variable is dp(s, e) indicates whether str[s, e] is palindromic

# state(s, e) is true:
# for s = e  
# for s + 1 = e,  if str[s] == str[e]
# for s + 2 <= e, if str[s] == str[e] && state(s + 1, e - 1) is true


class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return ''
        n = len(s)
        dp = [[False] * n for _ in range(n)]
        
        start = 0
        max_len = 1
        
        # Fill DP table for single char palindromes
        for i in range(n):
            dp[i][i] = True
        
        # Fill DP table for 2 char long palindromes
        for i in range(n - 1):
            if s[i] == s[i + 1]:
                dp[i][i + 1] = True
                start = i
                max_len = 2
        
        # Fill DP table for palindromes of every other length
        # starting from 3
        length = 3 
        while length <= n:
            for i in range(n - length + 1):
                j = i + length - 1
                if dp[i + 1][j - 1] == True and s[i] == s[j]:
                    dp[i][j] = True
                    max_len = length
                    start = i
            length += 1
        return s[start : start + max_len]
                    
        
    

# method2, emumeration, O(n^2) from middle to two ends
# 中心线枚举, 每个点作为中心线时找到的最长的回文串
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        res = ''
        max_len = 0
        for i in range(len(s)):
            length, substr = self.find_palind(s, i, i)
            if max_len < length:
                max_len = length
                res = substr
                
            length, substr = self.find_palind(s, i, i + 1)
            
            if max_len < length:
                max_len = length
                res = substr
 
        return res
    
    def find_palind(self, s, i, j):
    
        length = 0
        while i >= 0 and j < len(s):
            if s[i] == s[j]:
                if i == j:
                    length += 1
                else:
                    length += 2
                i -= 1
                j += 1
            else:
                break
        return length, s[i + 1 : j]
                
