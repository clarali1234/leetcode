To find the validity of a given board, we could first think about the cases where the board is invalid

Since X starts first, x_count >= o_count. So if o_count > x_count, we can return False
Since the players take turns, we could also return False if x_count-o_count>1
After the corner cases, this is the algorithm used:

If player O has a winning condition, also check the following:
a) If player X also has a winning condition, return False
b) If x_count != o_count , return False (Since player O always plays second, it has to meet this condition always)
If player X has a winning condition, check the following:
a) If x_count != o_count + 1, return False (Since player X plays the first move, if player X wins,
the player X's count would be 1 more than player O)

class Solution(object):
    def validTicTacToe(self, board):
        """
        :type board: List[str]
        :rtype: bool
        """
        # count the num of x and o
        c_o = c_x = 0
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 'O':
                    c_o += 1
                elif board[i][j] == 'X':
                    c_x += 1
        
        if (not c_o == c_x) and (not c_x - c_o == 1):
            return False
        
        if self.check_win(board, "X"):
            if self.check_win(board, "O") or (not c_x - c_o == 1):
                return False
            
        if self.check_win(board, 'O'):
            if self.check_win(board, 'X') or (not c_x == c_o):
                return False
            
        return True
    
    def check_win(self, board, offset):
        
        # check_row
        for i in range(len(board)):
            if board[i][0] == board[i][1] == board[i][2] == offset:
                return True
        # check_col
        for j in range(len(board[0])):
            if board[0][j] == board[1][j] == board[2][j] == offset:
                return True
            
        # check_diag
        if board[0][0] == board[1][1] == board[2][2] == offset:
            return True
        
        if board[0][2] == board[1][1] == board[2][0] == offset:
            return True
        return False
                
 class Solution:
    def validTicTacToe(self, board: List[str]) -> bool:
        c_X = 0
        c_O = 0
        for i in range(3):
            for j in range(3):
                if board[i][j] == 'X':
                    c_X += 1
                elif board[i][j] == 'O':
                    c_O += 1
        if not (c_X == c_O or c_X - c_O == 1):
            return False
        
        x_win = self.check_win(board, 'X')
        o_win = self.check_win(board, 'O')
        
        if x_win:
            if o_win or (c_X - c_O != 1):
                return False
        if o_win:
            if x_win or (c_X != c_O):
                return False
        return True
    
    def check_win(self, board, player):
        row = [0 for _ in range(3)]
        col = [0 for _ in range(3)]  
        diag = 0
        anti = 0
        for x in range(3):
            for y in range(3):
                if board[x][y] == player:
                    row[x] += 1
                    col[y] += 1
                    if x == y:
                        diag += 1
                    if x == 2 - y:
                        anti += 1
        return 3 in [diag, anti] + row + col
                
