# time O(n * 4^L), n is the number of node, L is length of word, 如果board很大，word很短, mn is upper bound of 4 ^ L
# space O(mn) + O(L), L is the depth of recursion
# node:
    base case, 先判断 index == len(word),再判断是否出界！！！

class Solution(object):
    def exist(self, board, word):
        
        if not board or not word:
            return False
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                visited = set()
                if self.dfs(board, i, j, word, 0, visited):
                    return True
                
        return False
    
    def dfs(self, board, x, y, word, index, visited):
        if index == len(word):
            return True
        
        if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or (x, y) in visited or board[x][y] != word[index]:
            return False
        
        visited.add((x, y))
        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            if self.dfs(board, new_x, new_y, word, index + 1, visited):
                return True
        visited.remove((x, y))
        return False
        
        
 # reduce space complexity to O(L)
 class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, i, j, word, 0):
                    return True
                
        return False
    
    def dfs(self, board, x, y, word, index):
        if index == len(word):
            return True
        
        if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or board[x][y] != word[index]:
            return False
        
        char = board[x][y]
        board[x][y] = '#'
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            new_x = x + dx
            new_y = y + dy
            if self.dfs(board, new_x, new_y, word, index + 1):
                return True
        board[x][y] = char
        return False
        
